<%- include('./partial_imports/import_above_content.ejs', { Title: "Estimating Passive Suspension with Kalman Filter", PageAddr: 'kf_passive_suspension' } ) %>

<div style="margin: 5px;">
    <button type="button" class="btn btn-info"   id="btnConnect">Connect</button>
    <button type="button" class="btn btn-warning" id="btnPause">Pause</button>
    <button type="button" class="btn btn-theme" id="btnStep">Step</button>
    <button type="button" class="btn btn-primary" id="btnRun" >Run</button>
    <button type="button" class="btn btn-theme" id="btnReset">Reset</button>
</div>


<main>
</main>


<%- include('./partial_imports/import_below_content.ejs') %>

<script type="text/javascript">


var linearAlgebra = require('linear-algebra')(),     // Initialise it
                    Vector = linearAlgebra.Vector,
                    Matrix = linearAlgebra.Matrix;

var Enum = require('enum');
const { SuspensionEstimator, DrawHelper, HandleWorkFlow } = require('../classes/cls_kf_passive_suspension');

const windowWidth = 900;
const windowHeight = 600;
const halfWidth = windowWidth / 2;


var estimator = new SuspensionEstimator();
estimator.init();
const drawHelper = new DrawHelper( estimator, windowWidth );

var handleWorkFlow = new HandleWorkFlow( estimator, ipcRenderer, windowWidth );
console.log( handleWorkFlow );


$(document).ready( () => {

    $("#btnConnect").click( () => {

        handleWorkFlow.handleConnect();
    });

    $("#btnPause").click( () => {

        handleWorkFlow.handlePause();
    });

    $("#btnReset").click( () => {

        handleWorkFlow.handleReset();
    });

    $("#btnStep").click( () => {

        handleWorkFlow.handleStep();
    });

    $("#btnRun").click( () => {

        handleWorkFlow.handleRun();        
    });

} );

ipcRenderer.on('estimating_passive_suspension:get:values', (event, values) => {

    values = values.split(';');

    handleWorkFlow.handleReceivedValues( values );
})



function setup() {

  createCanvas(windowWidth, windowHeight);
  strokeWeight(2);  
  frameRate(4);

}


function drawBackground() {

    background(230, 230, 230);
    fill(210, 210, 210);
    strokeWeight(2);
    stroke(170);
    rectMode(CORNER);
    rect(0, 0, windowWidth, windowHeight);

    drawLegends();
}

function drawLegends() {

    translate(0, 0);

    fill(0, 102, 153);
    noStroke()
    textSize(12);
    textAlign(LEFT, CENTER);
    text('Ground Truth', 40, 30)
    text('Estimated Mean', 40, 50)

    stroke(0);
    strokeWeight(1.5)
    line(10, 30, 30, 30);

    stroke(255, 0, 0);
    strokeWeight(1.5)
    line(10, 50, 30, 50);
}

function draw() {

    drawBackground();

    if( handleWorkFlow.isStateRunning() || handleWorkFlow.isStatePause()  ) {
  
        translate(0, 3*height/4);
        
        var firstValue = handleWorkFlow.counter - windowWidth;
        for(var i = handleWorkFlow.counter - windowWidth; i < handleWorkFlow.counter; i++) {
            
            stroke(255, 0, 0);
            if(i <= handleWorkFlow.counter - halfWidth) {
                point(i - firstValue, estimator.getSuspensionEstimated(i) + drawHelper.suspensionOffset() );
                point(i - firstValue, estimator.getTyreEstimated(i));  
            }
            
            stroke(0);
            point(i - firstValue, estimator.getSuspensionTruth(i) + drawHelper.suspensionOffset() );
            point(i - firstValue, estimator.getTyreTruth(i));
        }
            
        drawHelper.drawBottomSuspension( handleWorkFlow.counter );
        drawHelper.drawTopSuspension( handleWorkFlow.counter );
        drawHelper.drawDamper( handleWorkFlow.counter );
        
        
        fill(220);
        rectMode(CENTER);
        rect(width/2, estimator.getSuspensionTruth(handleWorkFlow.counter-halfWidth) + drawHelper.suspensionOffset(), 150, 50);
        ellipseMode(CENTER);
        fill(0);
        circle(width/2, estimator.getTyreTruth(handleWorkFlow.counter-halfWidth), 30);
        
        line(width/2-50, estimator.getTyreTruth(handleWorkFlow.counter-halfWidth) - 50, 
             width/2+50, estimator.getTyreTruth(handleWorkFlow.counter-halfWidth) - 50 );
        
        line(width/2, estimator.getTyreTruth(handleWorkFlow.counter-halfWidth), 
             width/2, estimator.getTyreTruth(handleWorkFlow.counter-halfWidth) - 50 );
        
            
        if( handleWorkFlow.isStateRunning() ) {

            if( handleWorkFlow.counter < estimator.n - 15 )
                handleWorkFlow.counter += 15;
            else {
                handleWorkFlow.state2Finish();
                noLoop();
            }
        }

    }
  
}


</script>