<%- include('./partial_imports/import_above_content.ejs', { Title: "Estimating Passive Suspension with Kalman Filter", PageAddr: 'kf_passive_suspension' } ) %>

<div class="row mt">
    <div class="col-lg-12">
        <div class="form-panel">
        <h4 class="mb"><i class="fa fa-angle-right"></i> Connection Configuration </h4>

        <div class="row mt">
            <div class="form-group form-horizontal">
                <label class="col-sm-2 control-label"  style="padding-left: 20px; width: 16%;">Simulation Time</label>
                <div class="col-sm-4" style="padding-left: 0px;">
                    <input class="form-control" id="time_id" value="12">
                </div>
            </div>
        </div>

        <!-- <div class="row mt">
            <div class="form-group form-horizontal">
                <label class="col-sm-2 control-label"  style="padding-left: 20px; width: 16%;">Connection Type</label>
                <div class="col-sm-4" style="padding-left: 0px;">
                    <select class="form-control" id="connection_type" style="padding-left: 0px;">
                        <option value="uart">UART</option>
                        <option value="tcp">TCP/IP</option>
                    </select>
                </div>
            </div>
        </div> -->

        <div class="row mt" id="ip_div_id">
            <div class="form-group form-horizontal">
                <label class="col-sm-2 control-label"  style="padding-left: 20px; width: 16%;">IP</label>
                <div class="col-sm-4" style="padding-left: 0px;">
                    <input class="form-control" id="ip_id" placeholder="127.0.0.1" value="127.0.0.1">
                </div>
            </div>
        </div>

        <div class="row mt" id="port_div_id">
            <div class="form-group form-horizontal">
                <label class="col-sm-2 control-label"  style="padding-left: 20px; width: 16%;">Port</label>
                <div class="col-sm-4" style="padding-left: 0px;">
                    <input class="form-control" id="port_id" placeholder="5091" value="5091">
                </div>
            </div>
        </div>

        <!-- <div class="row mt" id="uart_div_id">
            <div class="form-group form-horizontal">
                <label class="col-sm-2 control-label"  style="padding-left: 20px; width: 16%;">UART</label>
                <div class="col-sm-4" style="padding-left: 0px;">
                    <select class="form-control" id="uart_select" style="padding-left: 0px;">
                    </select>
                </div>
                <button type="button" class="btn btn-primary" id="reloadUart">Reload</button>
            </div>
        </div> -->

        </div>
        <!-- /form-panel -->
    </div>
    <!-- /col-lg-12 -->
</div>

<div style="margin: 5px;">
    <button type="button" class="btn btn-info"   id="btnConnect">Connect</button>
    <button type="button" class="btn btn-theme" id="btnPause">Pause/Play</button>
    <button type="button" class="btn btn-theme" id="btnReplay">Replay</button>
    <button type="button" class="btn btn-primary" id="btnRun" >Run</button>
    <button type="button" class="btn btn-theme" id="btnReset">Reset</button>
</div>
<div style="margin: 5px;">
    <div class="alert alert-success"><b id="workflow">Disconnect</b></div>
</div>


<main>
</main>


<%- include('./partial_imports/import_below_content.ejs') %>

<script type="text/javascript">

function setWorkflow(txt) {
    $("#workflow").text(txt)
}

var linearAlgebra = require('linear-algebra')(),
                    Vector = linearAlgebra.Vector,
                    Matrix = linearAlgebra.Matrix;

var Enum = require('enum');
const { SuspensionEstimator, DrawHelper, HandleWorkFlow } = require('../classes/cls_kf_passive_suspension');

const windowWidth   = 900;
const windowHeight  = 600;
const halfWidth     = windowWidth / 2;


var estimator = new SuspensionEstimator();
// estimator.init();
const drawHelper = new DrawHelper(estimator, windowWidth);

var handleWorkFlow = new HandleWorkFlow(estimator, ipcRenderer, windowWidth, showFlashMessage, setWorkflow);
// console.log( handleWorkFlow );


$(document).ready( () => {

    $("#btnConnect").click( () => {

        handleWorkFlow.handleConnect( $('#ip_id').val(), $('#port_id').val() );
    });

    $("#btnPause").click( () => {

        handleWorkFlow.handlePause();
    });

    $("#btnReset").click( () => {

        handleWorkFlow.handleReset();
    });

    $("#btnReplay").click( () => {

        handleWorkFlow.counter = handleWorkFlow.handleReplay(handleWorkFlow.counter);
    });

    $("#btnRun").click( () => {

        handleWorkFlow.handleRun($("#time_id").val(), handleWorkFlow.counter);
    });

} );


function setup() {

  createCanvas(windowWidth, windowHeight);
  strokeWeight(2);  
  frameRate(4);

  drawBackground();
}


function drawBackground() {

    background(230, 230, 230);
    fill(210, 210, 210);
    strokeWeight(2);
    stroke(170);
    rectMode(CORNER);
    rect(0, 0, windowWidth, windowHeight);

    drawLegends();
}

function drawLegends() {

    translate(0, 0);

    fill(0, 102, 153);
    noStroke()
    textSize(12);
    textAlign(LEFT, CENTER);
    text('Ground Truth', 40, 30)
    text('Estimated Mean', 40, 50)

    stroke(0);
    strokeWeight(1.5)
    line(10, 30, 30, 30);

    stroke(255, 0, 0);
    strokeWeight(1.5)
    line(10, 50, 30, 50);
}

function draw() {

    if(handleWorkFlow.isDrawing()) {

        drawBackground();

        translate(0, 3*height/4);
        
        var firstValue = handleWorkFlow.counter - windowWidth;
        for(var i = handleWorkFlow.counter - windowWidth; i < handleWorkFlow.counter; i++) {
            
            stroke(255, 0, 0);
            if(i <= handleWorkFlow.counter - halfWidth) {
                point(i - firstValue, estimator.getSuspensionEstimated(i) + drawHelper.suspensionOffset() );
                point(i - firstValue, estimator.getTyreEstimated(i));
            }
            
            stroke(0);
            point(i - firstValue, estimator.getSuspensionTruth(i) + drawHelper.suspensionOffset() );
            point(i - firstValue, estimator.getTyreTruth(i));
        }
            
        drawHelper.drawBottomSuspension( handleWorkFlow.counter );
        drawHelper.drawTopSuspension( handleWorkFlow.counter );
        drawHelper.drawDamper( handleWorkFlow.counter );
        
        
        fill(220);
        rectMode(CENTER);
        rect(width/2, estimator.getSuspensionTruth(handleWorkFlow.counter-halfWidth) + drawHelper.suspensionOffset(), 150, 50);
        ellipseMode(CENTER);
        fill(0);
        circle(width/2, estimator.getTyreTruth(handleWorkFlow.counter-halfWidth), 30);
        
        line(width/2-50, estimator.getTyreTruth(handleWorkFlow.counter-halfWidth) - 50, 
             width/2+50, estimator.getTyreTruth(handleWorkFlow.counter-halfWidth) - 50 );
        
        line(width/2, estimator.getTyreTruth(handleWorkFlow.counter-halfWidth), 
             width/2, estimator.getTyreTruth(handleWorkFlow.counter-halfWidth) - 50 );
        
            
        if(handleWorkFlow.counter < estimator.n - 15) {
            handleWorkFlow.counter += 15;
        } else {
            handleWorkFlow.finishDraw();
        }
    }
}


</script>