<%- include('./partial_imports/import_above_content.ejs', { Title: "Localization with Extended Kalman Filter", PageAddr: 'ekf_localization' } ) %>


<!-- INLINE FORM ELELEMNTS -->
<div class="row mt">
    <div class="col-lg-12">
        <div class="form-panel">
        <h4 class="mb"><i class="fa fa-angle-right"></i> Connection Parameters</h4>

        <div class="row mt">
            <div class="form-group form-horizontal">
                <label class="col-sm-2 control-label"  style="padding-left: 20px; width: 16%;">IP</label>
                <div class="col-sm-4" style="padding-left: 0px;">
                    <input class="form-control" id="ip_id" placeholder="127.0.0.1" value="127.0.0.1">
                </div>
            </div>
        </div>

        <div class="row mt">
            <div class="form-group form-horizontal">
                <label class="col-sm-2 control-label"  style="padding-left: 20px; width: 16%;">Port</label>
                <div class="col-sm-4" style="padding-left: 0px;">
                    <input class="form-control" id="port_id" placeholder="5091" value="5091">
                </div>
            </div>
        </div>

        <div class="row mt">
            <div style="margin: 15px;">
                <button type="button" class="btn btn-primary" id="btnRun" >Run</button>
                <button type="button" class="btn btn-primary" id="btnStop" >Stop</button>
                <button type="button" class="btn btn-primary" id="btnReset" >Reset</button>
            </div>            
        </div>

        </div>
    </div>
</div>




<canvas class="webgl" id="threejs_canvas"> 
</canvas>

<br /> <br />

<main>
</main>

<%- include('./partial_imports/import_below_content.ejs') %>

<script type="text/javascript">

const fs = require('fs')

var Enum = require('enum');
const THREE = require('three');

require('../ekf_localization/GLTFLoader');
require('../ekf_localization/OrbitControls');
require('../ekf_localization/RoomEnvironment');

const Ammo = require('../ekf_localization/ammo');
require('../ekf_localization/Detector');
require('../ekf_localization/stats.min');

var ip = "";
var port = 0;


$(document).ready( () => {

    $("#btnRun").click( () => {

        state = State.running;
        ip = $("#ip_id").val(); 
        port = $("#port_id").val();
        ipcRenderer.send('ekf_localization:tcp:connect', ip, port);
    });
    
});


const GUI_DEBUG_ENABLE = false;
const STATS_DEBUG_ENABLE = false;

if(GUI_DEBUG_ENABLE == true) {
    const dat = require('dat.gui');
    const gui = new dat.GUI();

    // dummy variables
    params = { x: 1, y: 1, z: 1, w: 1, t: 1, f: 1 }
    gui.add(params, 'x').min(1).max(50).step(1);
    gui.add(params, 'y').min(1).max(50).step(1);
}

if(STATS_DEBUG_ENABLE == true) {
    const Stats = require('stats-js');
    var stats = new Stats();
    stats.showPanel( 0 ); // 0: fps, 1: ms, 2: mb, 3+: custom
    document.body.appendChild( stats.dom );
}

const scene = new THREE.Scene();
scene.background = new THREE.Color( 0xcce0ff );
// scene.fog = new THREE.Fog( 0xcce0ff, 10, 50 );
scene.fog = new THREE.Fog( 0xcce0ff, 10, 2500 );

const axesHelper = new THREE.AxesHelper( 200 );


const loader = new THREE.GLTFLoader();

const canvas = document.querySelector("canvas.webgl");


// const objectsToUpdate = []

const textureLoader = new THREE.TextureLoader();
// const groundTexture = textureLoader.load( '../ekf_localization/textures/terrain/grasslight-big.jpg' );
const groundTexture = textureLoader.load( '../ekf_localization/textures/granite_seamless_gravel.jpg' );
groundTexture.wrapS = groundTexture.wrapT = THREE.RepeatWrapping;
// groundTexture.repeat.set( 60, 60 );
groundTexture.repeat.set( 100, 100 );
groundTexture.anisotropy = 100;
groundTexture.encoding = THREE.sRGBEncoding;

const groundMaterial = new THREE.MeshLambertMaterial( { map: groundTexture } );
// const groundMaterial = new THREE.MeshLambertMaterial( { color: 'black' }  );

// Floor 
let floor = new THREE.Mesh( new THREE.PlaneGeometry( 4000, 4000 ), groundMaterial );
// floor.position.y = - 250;
// floor.material.visible = false;
floor.rotation.x = - Math.PI / 2;
floor.receiveShadow = true;
scene.add( floor );


// Create box
const boxGeometry = new THREE.BoxBufferGeometry(1, 1, 1)
const boxMaterial = new THREE.MeshStandardMaterial({
    metalness: 0.3,
    roughness: 0.4
})

var State = new Enum( { 

    'ready': 1,
    'pause': 2,
    'drawData': 3,
    'addData': 4,
    'addInitial': 5,
    'running': 7,
    'step': 8

} )
var state = State.ready;

let predictedPath = []
let groundtruthPath = []

ipcRenderer.on('ekf_localization:draw', (event, x, y, angle) => {

    predictedPath.push( [x, y] )
});


function resetAllStates() {

    state = State.ready;
    predictedPath = [];
    groundtruthPath = [];
}

// var state = State.ready;
// var lastState = State.ready;

const windowWidth = 900;
const windowHeight = 600;

Ammo().then(function(Ammo) {

    // var camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
    let camera = new THREE.PerspectiveCamera( 30, window.innerWidth / window.innerHeight, 0.1, 2500 );
    // camera.position.set( 60, 10, 25 );
    camera.position.set( 688, 114, 0 );

    var renderer = new THREE.WebGLRenderer({ canvas: canvas });

    const pmremGenerator = new THREE.PMREMGenerator( renderer );
    scene.environment = pmremGenerator.fromScene( new THREE.RoomEnvironment(), 0.4 ).texture;

    renderer.setSize(windowWidth, windowHeight);
    renderer.outputEncoding = THREE.sRGBEncoding;

    renderer.shadowMap.enabled = true;

    let car = null;
    let tyres = []
    loader.load( '../ekf_localization/truck_gmc/truck.gltf', function ( gltf ) {
    // loader.load( '../ekf_localization/gmc_sierra_work_truck/scene.gltf', function ( gltf ) {

        car = gltf.scene;
        car.rotation.y = Math.PI/2;
        // car.position.y = 50;
        // gltf.scene.position.y = 100;
        // gltf.scene.scale.set(14, 14, 14);
        gltf.scene.scale.set(0.1, 0.1, 0.1);
        gltf.scene.scale.set(0.2, 0.2, 0.2);
        
        // window.car = car;
        // console.log(car.children[0].children[0].children[0].children[0].children[0].children[1]);
        tyre_fr = car.children[0].children[0].children[0].children[0].children[0].children[1];
        tyre_fl = car.children[0].children[0].children[0].children[0].children[0].children[4];
        tyre_bl = car.children[0].children[0].children[0].children[0].children[0].children[2];
        tyre_br = car.children[0].children[0].children[0].children[0].children[0].children[3];

        // tyre_fl.add( axesHelper );

        tyre_fr.rotation.order = 'YZX';
        tyre_fl.rotation.order = 'YZX';
        tyre_bl.rotation.order = 'YZX';
        tyre_br.rotation.order = 'YZX';

        // tyre_fl.rotation.z = Math.PI / 6;
        // console.log(tyre_1);
        tyres.push(tyre_fr)
        tyres.push(tyre_fl)
        tyres.push(tyre_bl)
        tyres.push(tyre_br)

        scene.add(car);

    }, undefined, function ( error ) {
        console.error( error );
    } );

    function addCube(cube, x, z, y=300) {
        cube.position.x = x
        cube.position.y = y
        cube.position.z = z
        scene.add(cube);
    }


    let cube_1 = null;
    let cube_2 = null;
    let cube_1_arr = null;
    
    loader.load( '../ekf_localization/dirty_brick_mats/scene.gltf', function ( gltf ) {

        gltf.scene.rotation.y = Math.PI/2;

        cube_1 = gltf.scene.children[0].children[0].children[0].children[0];
        cube_2 = gltf.scene.children[0].children[0].children[0].children[1];

        cube_1.scale.set(0.05, 0.05, 0.05);
        // cube_1.position.y = 300;
        cube_2.scale.set(0.1, 0.1, 0.1);
        // cube_2.position.x = 1500;
        cube_2.position.y = 300;

        var cube_1_1 = cube_1.clone();
        var cube_1_2 = cube_1.clone();
        var cube_1_3 = cube_1.clone();
        var cube_1_4 = cube_1.clone();

        addCube(cube_1_1, 100, 60, 7);        
        addCube(cube_1_2, 100, 70, 7);
        addCube(cube_1_3, 100, 80, 7);
        addCube(cube_1_4, 100, 67, 14);

        if(GUI_DEBUG_ENABLE == true) {
            gui.add(cube_1_1.position, 'x').min(-10000).max(10000).step(1).name('Cube 1 x');
            gui.add(cube_1_1.position, 'z').min(-10000).max(10000).step(1).name('Cube 1 z');
        }

        addCube(cube_2.clone(), 90, -90, 10);

    }, undefined, function ( error ) {
        console.error( error );
    } );

    loader.load( '../ekf_localization/concrete_block_low_poly/scene.gltf', function ( gltf ) {

        // gltf.scene.rotation.y = Math.PI/2;
        
        var bx = gltf.scene;
        bx.scale.set(10, 10, 10);
        
        var cube_1 = gltf.scene.clone();
        var cube_2 = gltf.scene.clone();
        var cube_3 = gltf.scene.clone();

        addCube(cube_1, -140, -60,  5);
        addCube(cube_2, -140, -100, 5);
        addCube(cube_3, -140, -80,  5);

        if(GUI_DEBUG_ENABLE == true) {
            gui.add(cube_1.position, 'y').min(0).max(10000).step(1).name('Cube 1 y');
            gui.add(cube_1.position, 'z').min(-10000).max(10000).step(1).name('Cube 1 z');
        }

    }, undefined, function ( error ) {
        console.error( error );
    } );

    loader.load( '../ekf_localization/concrete_road_divider__game/scene.gltf', function ( gltf ) {

        gltf.scene.rotation.y = Math.PI/2;
        
        var bx = gltf.scene;
        bx.scale.set(20, 20, 20);
        
        var cube_1 = gltf.scene.clone();
        var cube_2 = gltf.scene.clone();
        var cube_3 = gltf.scene.clone();
        var cube_4 = gltf.scene.clone();
        var cube_5 = gltf.scene.clone();

        addCube(cube_1, -50, 200, 0);
        addCube(cube_2, -34, 200, 0);
        addCube(cube_3, -66, 200, 0);
        addCube(cube_4, -82, 200, 0);
        addCube(cube_5, -18, 200, 0);        

    }, undefined, function ( error ) {
        console.error( error );
    } );


    let wall_1 = null;
    loader.load( '../ekf_localization/damaged_wall/scene.gltf', function ( gltf ) {

        gltf.scene.rotation.y = Math.PI/2;

        wall = gltf.scene;

        for(var i = 0; i < 13; i++) {

            let wall_back = wall.clone();
            wall_back.scale.set(0.2, 0.2, 0.2);
            wall_back.position.set(260, 0, (i*40)-240);
            scene.add(wall_back);

            let wall_front = wall.clone();
            wall_front.scale.set(0.2, 0.2, 0.2);
            wall_front.position.set(-260, 0, (i*40)-240);
            scene.add(wall_front);

            let wall_left = wall.clone();
            wall_left.rotation.y = Math.PI;
            wall_left.scale.set(0.2, 0.2, 0.2);
            // wall_left.position.set(-250, 0, (i*40)-240);
            wall_left.position.set(-(i*40)+240, 0, -260);
            scene.add(wall_left);


            let wall_right = wall.clone();
            wall_right.rotation.y = Math.PI;
            wall_right.scale.set(0.2, 0.2, 0.2);
            wall_right.position.set((i*40)-240, 0, 260);
            scene.add(wall_right);

        }

    }, undefined, function ( error ) {
        console.error( error );
    } );    

    const sphereSize = 1;

    var ambient = new THREE.AmbientLight( 0x666666 );
    scene.add( ambient );

    const light = new THREE.DirectionalLight( 0xdfebff, 1 );
    light.position.set( 50, 200, 100 );
    light.position.multiplyScalar( 1.3 );

    light.castShadow = true;

    light.shadow.mapSize.width = 1024;
    light.shadow.mapSize.height = 1024;

    const d = 300;

    light.shadow.camera.left = - d;
    light.shadow.camera.right = d;
    light.shadow.camera.top = d;
    light.shadow.camera.bottom = - d;

    light.shadow.camera.far = 1000;

    scene.add( light );

    const controls = new THREE.OrbitControls(camera, canvas)
    controls.maxPolarAngle = Math.PI * 0.45;
    controls.minPolarAngle = Math.PI * 0.2;
    controls.minDistance = 1;
    controls.maxDistance = 700;


    if(GUI_DEBUG_ENABLE == true) {

        gui.add(scene.fog, 'near').min(10).max(1000).step(1).name("Fog Near");
        gui.add(scene.fog, 'far').min(1000).max(10000).step(1).name("Fog Far");

        gui.add(controls, 'maxDistance').min(1000).max(30000).step(1).name("Controls MaxDistance");

        gui.add(camera.position, 'x').min(1).max(10000).step(1).name("Camera x");
        gui.add(camera.position, 'y').min(1).max(10000).step(1).name("Camera y");
        gui.add(camera.position, 'z').min(1).max(10000).step(1).name("Camera z");    
    }


    // camera.position.y = 1;
    const clock = new THREE.Clock()
    let oldElapsedTime = 0
    camera.position.z = 5;

    var materialDynamic, materialStatic, materialInteractive;

    // - Global variables -
    var DISABLE_DEACTIVATION = 4;
    var TRANSFORM_AUX = new Ammo.btTransform();
    var ZERO_QUATERNION = new THREE.Quaternion(0, 0, 0, 1);


    window.wheels = null;

    // Physics variables
    var collisionConfiguration;
    var dispatcher;
    var broadphase;
    var solver;
    var physicsWorld;

    var syncList = [];
    var time = 0;
    var objectTimePeriod = 3;
    var timeNextSpawn = time + objectTimePeriod;
    var maxNumObjects = 30;

    // Keybord actions
    var actions = {};
    var keysActions = {
        "KeyW":'acceleration',
        "KeyS":'braking',
        "KeyA":'left',
        "KeyD":'right'
    };



    function initGraphics() {

        // speedometer = document.getElementById( 'speedometer' );

        materialDynamic = new THREE.MeshPhongMaterial( { color:0xfca400 } );
        materialStatic = new THREE.MeshPhongMaterial( { color:0x999999 } );
        materialInteractive =new THREE.MeshPhongMaterial( { color:0x990000 } );

        materialDynamic.wireframe = true;
        materialStatic.wireframe = true;
        materialInteractive.wireframe = true;

        materialDynamic.visible = false;
        materialStatic.visible = false;
        materialInteractive.visible = false;

        // container.innerHTML = "";
        // container.appendChild( renderer.domElement );

        if(STATS_DEBUG_ENABLE == true) {
            // stats = new Stats();
            // stats.domElement.style.position = 'absolute';
            // stats.domElement.style.top = '0px';
            // container.appendChild( stats.domElement );
        }

        // window.addEventListener( 'resize', onWindowResize, false );
        window.addEventListener( 'keydown', keydown);
        window.addEventListener( 'keyup', keyup);
    }

    function keyup(e) {
        if(keysActions[e.code]) {
            actions[keysActions[e.code]] = false;
            e.preventDefault();
            e.stopPropagation();
            return false;
        }
    }
    function keydown(e) {
        if(keysActions[e.code]) {
            actions[keysActions[e.code]] = true;
            e.preventDefault();
            e.stopPropagation();
            return false;
        }
    }



    function initPhysics() {

        // Physics configuration
        collisionConfiguration = new Ammo.btDefaultCollisionConfiguration();
        dispatcher = new Ammo.btCollisionDispatcher( collisionConfiguration );
        broadphase = new Ammo.btDbvtBroadphase();
        solver = new Ammo.btSequentialImpulseConstraintSolver();
        physicsWorld = new Ammo.btDiscreteDynamicsWorld( dispatcher, broadphase, solver, collisionConfiguration );
        physicsWorld.setGravity( new Ammo.btVector3( 0, -9.82, 0 ) );
    }

    function createBox(pos, quat, w, l, h, mass, friction) {

        var material = mass > 0 ? materialDynamic : materialStatic;
        var shape = new THREE.BoxGeometry(w, l, h, 1, 1, 1);
        var geometry = new Ammo.btBoxShape(new Ammo.btVector3(w * 0.5, l * 0.5, h * 0.5));

        if(!mass) mass = 0;
        if(!friction) friction = 1;

        var mesh = new THREE.Mesh(shape, material);
        mesh.position.copy(pos);
        mesh.quaternion.copy(quat);
        scene.add( mesh );

        var transform = new Ammo.btTransform();
        transform.setIdentity();
        transform.setOrigin(new Ammo.btVector3(pos.x, pos.y, pos.z));
        transform.setRotation(new Ammo.btQuaternion(quat.x, quat.y, quat.z, quat.w));
        var motionState = new Ammo.btDefaultMotionState(transform);

        var localInertia = new Ammo.btVector3(0, 0, 0);
        geometry.calculateLocalInertia(mass, localInertia);

        var rbInfo = new Ammo.btRigidBodyConstructionInfo(mass, motionState, geometry, localInertia);
        var body = new Ammo.btRigidBody(rbInfo);

        body.setFriction(friction);
        //body.setRestitution(.9);
        //body.setDamping(0.2, 0.2);

        physicsWorld.addRigidBody( body );

        if (mass > 0) {
            body.setActivationState(DISABLE_DEACTIVATION);
            // Sync physics and graphics
            function sync(dt) {
                var ms = body.getMotionState();
                if (ms) {
                    ms.getWorldTransform(TRANSFORM_AUX);
                    var p = TRANSFORM_AUX.getOrigin();
                    var q = TRANSFORM_AUX.getRotation();
                    mesh.position.set(p.x(), p.y(), p.z());
                    mesh.quaternion.set(q.x(), q.y(), q.z(), q.w());
                }
            }

            syncList.push(sync);
        }
    }

    function createWheelMesh(radius, width) {
        var t = new THREE.CylinderGeometry(radius, radius, width, 24, 1);
        t.rotateZ(Math.PI / 2);
        var mesh = new THREE.Mesh(t, materialInteractive);
        mesh.add(new THREE.Mesh(new THREE.BoxGeometry(width * 1.5, radius * 1.75, radius*.25, 1, 1, 1), materialInteractive));
        scene.add(mesh);
        return mesh;
    }

    function createChassisMesh(w, l, h) {
        var shape = new THREE.BoxGeometry(w, l, h, 1, 1, 1);
        var mesh = new THREE.Mesh(shape, materialInteractive);
        scene.add(mesh);
        return mesh;
    }

    function createVehicle(pos, quat) {


        var chassisWidth = 16;
        var chassisHeight = 2.5;
        var chassisLength = 40;
        var massVehicle = 800;

        var wheelAxisPositionBack = -12;
        var wheelHalfTrackBack = 8;
        var wheelAxisHeightBack = -1;
        var wheelRadiusBack = 2;
        var wheelWidthBack = 1;

        var wheelAxisFrontPosition = 12;
        var wheelHalfTrackFront = 8;
        var wheelAxisHeightFront = -1;
        var wheelRadiusFront = 2;
        var wheelWidthFront = 1;

        var friction = 100;
        var suspensionStiffness = 20.0;
        var suspensionDamping = 2.3;
        var suspensionCompression = 4.4;
        var suspensionRestLength = 0.6;
        // var rollInfluence = 0.2;
        var rollInfluence = 0.1;

        var steeringIncrement = .04;
        var steeringClamp = .5;
        var maxEngineForce = 700;
        var maxBreakingForce = 100;


        // Chassis
        var geometry = new Ammo.btBoxShape(new Ammo.btVector3(chassisWidth * .5, chassisHeight * .5, chassisLength * .5));
        var transform = new Ammo.btTransform();
        transform.setIdentity();
        transform.setOrigin(new Ammo.btVector3(pos.x, pos.y, pos.z));
        transform.setRotation(new Ammo.btQuaternion(quat.x, quat.y, quat.z, quat.w));
        var motionState = new Ammo.btDefaultMotionState(transform);
        var localInertia = new Ammo.btVector3(0, 0, 0);
        geometry.calculateLocalInertia(massVehicle, localInertia);
        var body = new Ammo.btRigidBody(new Ammo.btRigidBodyConstructionInfo(massVehicle, motionState, geometry, localInertia));
        body.setActivationState(DISABLE_DEACTIVATION);
        physicsWorld.addRigidBody(body);
        var chassisMesh = createChassisMesh(chassisWidth, chassisHeight, chassisLength);

        // Raycast Vehicle
        var engineForce = 0;
        var vehicleSteering = 0;
        var breakingForce = 0;
        var tuning = new Ammo.btVehicleTuning();
        var rayCaster = new Ammo.btDefaultVehicleRaycaster(physicsWorld);
        var vehicle = new Ammo.btRaycastVehicle(tuning, body, rayCaster);
        window.vehicle = vehicle;
        vehicle.setCoordinateSystem(0, 1, 2);
        physicsWorld.addAction(vehicle);

        // Wheels
        var FRONT_LEFT = 0;
        var FRONT_RIGHT = 1;
        var BACK_LEFT = 2;
        var BACK_RIGHT = 3;
        var wheelMeshes = [];
        var wheelDirectionCS0 = new Ammo.btVector3(0, -1, 0);
        var wheelAxleCS = new Ammo.btVector3(-1, 0, 0);

        function addWheel(isFront, pos, radius, width, index) {

            var wheelInfo = vehicle.addWheel(
                    pos,
                    wheelDirectionCS0,
                    wheelAxleCS,
                    suspensionRestLength,
                    radius,
                    tuning,
                    isFront);

            wheelInfo.set_m_suspensionStiffness(suspensionStiffness);
            wheelInfo.set_m_wheelsDampingRelaxation(suspensionDamping);
            wheelInfo.set_m_wheelsDampingCompression(suspensionCompression);
            wheelInfo.set_m_frictionSlip(friction);
            wheelInfo.set_m_rollInfluence(rollInfluence);

            wheelMeshes[index] = createWheelMesh(radius, width);
        }


        addWheel(true, new Ammo.btVector3(wheelHalfTrackFront, wheelAxisHeightFront, wheelAxisFrontPosition), wheelRadiusFront, wheelWidthFront, FRONT_LEFT);
        addWheel(true, new Ammo.btVector3(-wheelHalfTrackFront, wheelAxisHeightFront, wheelAxisFrontPosition), wheelRadiusFront, wheelWidthFront, FRONT_RIGHT);
        addWheel(false, new Ammo.btVector3(-wheelHalfTrackBack, wheelAxisHeightBack, wheelAxisPositionBack), wheelRadiusBack, wheelWidthBack, BACK_LEFT);
        addWheel(false, new Ammo.btVector3(wheelHalfTrackBack, wheelAxisHeightBack, wheelAxisPositionBack), wheelRadiusBack, wheelWidthBack, BACK_RIGHT);

        window.wheels = wheelMeshes;
        var lastCoeff = 0;

        // Sync keybord actions and physics and graphics
        function sync(dt) {

            var speed = vehicle.getCurrentSpeedKmHour();
            // console.log(speed);

            // speedometer.innerHTML = (speed < 0 ? '(R) ' : '') + Math.abs(speed).toFixed(1) + ' km/h';

            breakingForce = 0;
            engineForce = 0;

            if (actions.acceleration) {
                if (speed < -1)
                    breakingForce = maxBreakingForce;
                else engineForce = maxEngineForce;
            }
            if (actions.braking) {
                if (speed > 1)
                    breakingForce = maxBreakingForce;
                else engineForce = -maxEngineForce / 2;
            }
            if (actions.left) {
                if (vehicleSteering < steeringClamp)
                    vehicleSteering += steeringIncrement;
            }
            else {
                if (actions.right) {
                    if (vehicleSteering > -steeringClamp)
                        vehicleSteering -= steeringIncrement;
                }
                else {
                    if (vehicleSteering < -steeringIncrement)
                        vehicleSteering += steeringIncrement;
                    else {
                        if (vehicleSteering > steeringIncrement)
                            vehicleSteering -= steeringIncrement;
                        else {
                            vehicleSteering = 0;
                        }
                    }
                }
            }


            if(speed > 900) 
                engineForce = 0;

            vehicle.applyEngineForce(engineForce, BACK_LEFT);
            vehicle.applyEngineForce(engineForce, BACK_RIGHT);

            vehicle.setBrake(breakingForce / 2, FRONT_LEFT);
            vehicle.setBrake(breakingForce / 2, FRONT_RIGHT);
            vehicle.setBrake(breakingForce, BACK_LEFT);
            vehicle.setBrake(breakingForce, BACK_RIGHT);

            vehicle.setSteeringValue(vehicleSteering, FRONT_LEFT);
            vehicle.setSteeringValue(vehicleSteering, FRONT_RIGHT);


            let pre_fr_y = wheelMeshes[0].rotation.y;

            var tm, p, q, i;
            var n = vehicle.getNumWheels();
            for (i = 0; i < n; i++) {
                vehicle.updateWheelTransform(i, true);
                tm = vehicle.getWheelTransformWS(i);
                p = tm.getOrigin();
                q = tm.getRotation();
                wheelMeshes[i].position.set(p.x(), p.y(), p.z());
                wheelMeshes[i].quaternion.set(q.x(), q.y(), q.z(), q.w());
                

                if(tyres.length == 0)
                    continue;


                if(i < 2) {
                    if(vehicleSteering > 0)
                        tyres[i].rotation.z = Math.PI / 6;
                    else if(vehicleSteering < 0)
                        tyres[i].rotation.z = -Math.PI / 6;
                    else
                    tyres[i].rotation.z = 0;
                }


                if(Math.abs(speed) < 1.2)
                    continue;



                var sclRotation = 0.02 * ( (speed / 15) + 1 );
                if(engineForce > 0) {
                    tyres[i].rotation.x += sclRotation;
                    lastCoeff = 1;
                } else if(engineForce < 0) {
                    tyres[i].rotation.x -= sclRotation;
                    lastCoeff = -1;
                } else {
                    tyres[i].rotation.x += lastCoeff * sclRotation;
                }

                // tyres[i].rotation.y = Math.PI / 6;
                
                

            }

            tm = vehicle.getChassisWorldTransform();
            p = tm.getOrigin();
            q = tm.getRotation();
            chassisMesh.position.set(p.x(), p.y(), p.z());
            chassisMesh.quaternion.set(q.x(), q.y(), q.z(), q.w());
        }

        syncList.push(sync);
    }

    initGraphics();
    initPhysics();
    // createBox(new THREE.Vector3(0, -0.5, 0), ZERO_QUATERNION, 50000, 1, 50000, 0, 2);
    createBox(new THREE.Vector3(0, -0.5, 0), ZERO_QUATERNION, 550, 5, 550, 0, 2);
    
    var quaternion = new THREE.Quaternion(0, 0, 0, 1);
    quaternion.setFromAxisAngle(new THREE.Vector3(0, 1, 0), Math.PI / 2);
    
    createVehicle(new THREE.Vector3(0, 5, 0), quaternion);
    // createBox(new THREE.Vector3(0, 200, 0), quaternion, 800, 400, 1000, 0);


    createBox(new THREE.Vector3(100, 7, 70), ZERO_QUATERNION, 10, 10, 30, 0, 0);
    createBox(new THREE.Vector3(-140, 5, -80), ZERO_QUATERNION, 10, 10, 60, 0, 0);
    createBox(new THREE.Vector3(-50, 3, 200), ZERO_QUATERNION, 80, 5, 5, 0, 0);
    createBox(new THREE.Vector3(90, 7, -90), ZERO_QUATERNION, 20, 20, 20, 0, 0);

    createBox(new THREE.Vector3(260, 5, 5), ZERO_QUATERNION, 10, 15, 500, 0, 0);
    createBox(new THREE.Vector3(-260, 5, 5), ZERO_QUATERNION, 10, 15, 500, 0, 0);
    createBox(new THREE.Vector3(5, 5, -260), ZERO_QUATERNION, 500, 15, 10, 0, 0);
    createBox(new THREE.Vector3(5, 5, 260), ZERO_QUATERNION, 500, 15, 10, 0, 0);



    var animate = function () {

        requestAnimationFrame(animate);

        if(STATS_DEBUG_ENABLE == true) {
            stats.begin();
        }


        var dt = clock.getDelta();
        for (var i = 0; i < syncList.length; i++)
            syncList[i](dt);

        physicsWorld.stepSimulation( dt, 10 );
        controls.update( dt );

        let vPos = vehicle.getChassisWorldTransform().getOrigin();
        let vRot = vehicle.getChassisWorldTransform().getRotation();
        // chassisMesh.quaternion.set(q.x(), q.y(), q.z(), q.w());
        if(car !== null) {
            car.position.set(vPos.x(), vPos.y()-5, vPos.z());
            car.quaternion.set(vRot.x(), vRot.y(), vRot.z(), vRot.w());
        }

        renderer.render( scene, camera );
        time += dt;


        if(STATS_DEBUG_ENABLE == true) {
            stats.end();
        }
    };


    var landmarks = [ 
                    [10,  15],  [11,  15],  [10,  16],  [11,  16],  
                    [-10, 15],  [-10, 16],  [-10, 17],  [-10, 18], [-9, 18],
                    [-10, -15], [-11, -15], [-12, -15], [-13, -15],
                    [10,  -11], [10,  -12], [10,  -13], [10,  -14]
                ]

    function calcLandmark(lmark, car_x, car_z, car_angle, std_rng, std_brg) {
    
        // x, z = sim_pos[0, 0], sim_pos[1, 0]
        const lmark_x = lmark[0] * 10
        const lmark_z = lmark[1] * 10
        var d = Math.sqrt( Math.pow(lmark_x - car_x, 2) + Math.pow(lmark_z - car_z, 2) )  
        
        var a = Math.atan2(lmark_z - car_z, lmark_x - car_x) - car_angle // sim_pos[2, 0]
        a = a + Math.random() * std_brg
        // a = ( a >= 0) ? a : a + Math.PI;

        var z = [   ( d + Math.random() * std_rng ) / 10,
                      a ]

        return `${z[0].toFixed(3)},${z[1].toFixed(3)}`
    }


    const std_vel = 0.1;
    const std_steer = 1;
    const std_range = 0.3;
    const std_bearing = 0.1;
    const prior_cov_pos = 0.1 
    const prior_cov_angle = 0.1
    const start_angle = 1.5;

    var tid = setTimeout(carMoveMonitor, 1000);
    var startX = null;
    var startY = null;
    var isPrior = true;

    function carMoveMonitor() {
        
        if(car != null && state == State.running) {

            if(startX === null) {
                startX = car.position.x;
                startY = car.position.z;
            } else {
                // let content = `${car.position.x}, ${car.position.z}, ${car.rotation.y}\r\n`

                groundtruthPath.push( [ car.position.x, car.position.z ] );

                var currX = car.position.x - startX;
                var currY = car.position.z - startY;

                var r = Math.sqrt( Math.pow(currX, 2) + Math.pow(currY, 2) )
                // const noiseScale = 5;
                // r = ( r + Math.random() * noiseScale ) - (noiseScale / 2);

                var theta = Math.atan2(currY, currX)
                theta = (theta > 1e-4) ? theta : 1e-4;

                let u = `${r.toFixed(4)}, ${theta.toFixed(4)}`
                
                const car_x = car.position.x;
                const car_z = car.position.z;

                const car_angle = ( car.rotation.y > 1e-4 ) ? car.rotation.y : 1e-4;
                var observations = ""
                for(var j = 0; j < landmarks.length; j++) {
                    if(observations !== "")
                        observations += ";";
                    observations +=  calcLandmark(landmarks[j], car_x, car_z, car_angle, std_range, std_bearing)
                }
                // console.log(observations)

                if(isPrior == true) {

                    // console.log("Car Angle ", car_angle);
                    var lands = "";
                    for(var j = 0; j < landmarks.length; j++) {
                        if(lands !== "")
                            lands += ";";
                        lands += `${landmarks[j][0]},${landmarks[j][1]}`
                    }

                    ipcRenderer.send('ekf_localization:tcp:send:prior', 
                        u, std_vel, std_steer, std_range, std_bearing, start_angle, prior_cov_pos, prior_cov_angle, 
                        observations, lands);
                    isPrior = false;

                } else {
                    ipcRenderer.send('ekf_localization:tcp:send:measurements', u, observations);
                }

                startX = car.position.x;
                startY = car.position.z;
            }
        }
        tid = setTimeout(carMoveMonitor, 1000);
    }

    animate();

});


let measurementColor = [ 0, 0, 0, 170 ]
let groundtruthColor = [ 0, 0, 255, 255 ]
let estimatedMeanColor = [ 255, 140, 0, 255 ]
let estimatedCovarColor = [ 255, 0, 0, 90 ]
let missDetectionColor = [ 255, 0, 0, 255 ]
let measurementCircleRadius = 5

function drawLegends() {

    fill(0, 102, 153);
    noStroke()
    textSize(12);
    textAlign(LEFT, CENTER);
    text('Ground Truth', 40, 30)
    text('Estimated Pose', 40, 50)

    fill(groundtruthColor[0], groundtruthColor[1], groundtruthColor[2], groundtruthColor[3])
    circle(20, 30, measurementCircleRadius)
    stroke(groundtruthColor[0], groundtruthColor[1], groundtruthColor[2], groundtruthColor[3])
    strokeWeight(1.5)
    line(10, 30, 30, 30)

    noStroke()
    fill(estimatedMeanColor[0], estimatedMeanColor[1], estimatedMeanColor[2], estimatedMeanColor[3])
    circle(20, 50, measurementCircleRadius*2)

}

function drawBackground() {

    rectMode(CORNER);
    background(230, 230, 230);
    fill(210, 210, 210);
    strokeWeight(2);
    stroke(170);
    rect(0, 0, 600, 600);

}

function drawObstacles() {

    rectMode(CORNER);
    fill(128);
    stroke(128);
    rect(100, 60, 10, 30);
    rect(-140, -100, 10, 40);
    rect(-82, 200, 70, 10);
    
    rectMode(CENTER);
    rect(90, -90, 25, 25);
}

function setup() {
    
    createCanvas(600, 600)
    
    drawBackground();
    drawLegends();

    
    frameRate(3);
}

function draw() {
    
    drawBackground();
    drawLegends();
    
    translate(width/2, height/2);
    rotate(-PI/2);

    drawObstacles();

    fill(groundtruthColor[0], groundtruthColor[1], groundtruthColor[2], groundtruthColor[3])
    stroke(groundtruthColor[0], groundtruthColor[1], groundtruthColor[2], groundtruthColor[3])
    for(var i = 0; i < predictedPath.length; i++) {

        circle(groundtruthPath[i][0], groundtruthPath[i][1], 3);
        if(i > 0)
            line(groundtruthPath[i][0], groundtruthPath[i][1], groundtruthPath[i - 1][0], groundtruthPath[i - 1][1])
    }


    stroke(estimatedMeanColor[0], estimatedMeanColor[1], estimatedMeanColor[2], estimatedMeanColor[3])
    fill(estimatedMeanColor[0], estimatedMeanColor[1], estimatedMeanColor[2], estimatedMeanColor[3])
    for(var i = 0; i < predictedPath.length; i++) {
        circle(predictedPath[i][0], predictedPath[i][1], 3);
    }
}


</script>
