<%- include('./partial_imports/import_above_content.ejs', { Title: "Inverted Pendulum on a Cart", PageAddr: 'inverted_pendulum' } ) %>

<style>

    .slider {
    -webkit-appearance: none;
    width: 50%;
    height: 15px;
    border-radius: 5px;  
    background: #d3d3d3;
    outline: none;
    opacity: 0.7;
    -webkit-transition: .2s;
    transition: opacity .2s;
    }

    .slider::-webkit-slider-thumb {
    -webkit-appearance: none;
    appearance: none;
    width: 25px;
    height: 25px;
    border-radius: 50%; 
    background: #04AA6D;
    cursor: pointer;
    }

    .slider::-moz-range-thumb {
    width: 25px;
    height: 25px;
    border-radius: 50%;
    background: #04AA6D;
    cursor: pointer;
    }

</style>

<div class="row mt">
    <div class="col-lg-12">
		<div class="form-panel">
		<p style="font-family: math; font-size: 18px; line-height: 1.5;">
			This Application is from Chapter 8 of "Data Driven Science & Engineering, Machine Learning, Dynamical Systems, and Control"
			<br />
			(Written by Steven L. Brunton & J. Nathan Kutz)
		</p>
		</div>
	</div>
</div>

<div class="row mt">
    <div class="col-lg-12">
        <div class="form-panel">
        <h4 class="mb"><i class="fa fa-angle-right"></i> Connection Configuration </h4>

        <div class="row mt" id="ip_div_id">
            <div class="form-group form-horizontal">
                <label class="col-sm-2 control-label"  style="padding-left: 20px; width: 16%;">IP</label>
                <div class="col-sm-4" style="padding-left: 0px;">
                    <input class="form-control" id="ip_id" placeholder="127.0.0.1" value="192.168.1.23">
                </div>
            </div>
        </div>

        <div class="row mt" id="port_div_id">
            <div class="form-group form-horizontal">
                <label class="col-sm-2 control-label"  style="padding-left: 20px; width: 16%;">Port</label>
                <div class="col-sm-4" style="padding-left: 0px;">
                    <input class="form-control" id="port_id" placeholder="5091" value="5555">
                </div>
            </div>
        </div>

        <div class="row mt" id="port_div_id">
            <div class="form-group form-horizontal">
                <label class="col-sm-2 control-label"  style="padding-left: 20px; width: 16%;">Angle</label>
                <div class="col-sm-4" style="padding-left: 0px; margin-top: 5px;">
                    <input type="range" min="-100" max="100" value="0" class="slider" id="angle_range">
                </div>
            </div>
        </div>
        
        </div>
        <!-- /form-panel -->
    </div>
    <!-- /col-lg-12 -->
</div>

<div style="margin: 5px;">
    <button type="button" class="btn btn-info"      id="btnConnect">Connect</button>
    <button type="button" class="btn btn-theme"     id="btnReplay">Replay</button>
    <button type="button" class="btn btn-primary"   id="btnRun" >Run</button>
    <button type="button" class="btn btn-theme"     id="btnReset">Reset</button>
</div>
<br /> <br />

<main>
</main>

<%- include('./partial_imports/import_below_content.ejs') %>

<script type="text/javascript">

// var fileIndex = 0;
// var fileNames = [ 'xe-4', 'xe-3', 'xe-2', 'xe-1' ];

const { Matrix } = require('ml-matrix');

const { InvertedPendulum, HandleWorkFlow } = require('../classes/cls_inverted_pendulum');

let x0 = new Matrix( [ [-1.00, 0, 3.7416, 0] ] )
const ref_pos = new Matrix( [ [0, 0, Math.PI, 0] ] ).transpose()
var t = []
var inverted_pendulum = new InvertedPendulum( x0, ref_pos, t );

// var isReadyToDraw = false
const n_ = 10000;
const h_ = 0.001;


function calcPendulum() {

    inverted_pendulum.rungekutta4(x0, h_, n_)
    // counter = 0
    isReadyToDraw = true;
}


const windowWidth   = 1200;
const windowHeight  = 600;
const halfWidth     = windowWidth / 2;

// const drawHelper = new DrawHelper( controller, windowWidth );

var handleWorkFlow = new HandleWorkFlow( inverted_pendulum, ipcRenderer, windowWidth );

$(document).ready( () => {

    $("#btnConnect").click( () => {
        handleWorkFlow.handleConnect( $('#ip_id').val(), $('#port_id').val() );
    });
    $("#btnReset").click( () => {
        
        if(handleWorkFlow.isStateDrawing() || handleWorkFlow.isStateFinish()) {
            handleWorkFlow.state2Ready();
            handleWorkFlow.counter_remote = -40
            handleWorkFlow.isReadyToDraw = false
            var angle = $('#angle_range').val();
            x0 = new Matrix( [ [0, 0, Math.PI - (angle/100), 0] ] ).transpose()
            drawBackground();
            drawCart(x0.get(0, 0), x0.get(2, 0))
        }
    });

    $("#btnReplay").click( () => {
        handleWorkFlow.handleReplay()
        // handleWorkFlow.counter_remote = -40;
    });

    $("#btnRun").click( () => {
        handleWorkFlow.handleRun( ref_pos, x0, n_, h_ );
    });
    $(document).on('input', '#angle_range', function() {

        if(handleWorkFlow.isStateStart() || handleWorkFlow.isStateReady()) {
            var angle = $(this).val();
            x0 = new Matrix( [ [0, 0, Math.PI - (angle/100), 0] ] ).transpose()
            drawBackground();
            drawCart(x0.get(0, 0), x0.get(2, 0))
        }
    });

} );



const draw_scale = 100;

const m = 1;
const M = 5;
const L = 2 * draw_scale;

const W  = 2    * Math.sqrt(M/5) * draw_scale;        // cart width
const H  = 0.75 * Math.sqrt(M/5) * draw_scale;        // cart height
const wr = 0.3  * draw_scale;                         // wheel radius
const mr = 0.3  * Math.sqrt(m)   * draw_scale;        // mass radius

const y = wr / 2 + H / 2;               // cart vertical position


ipcRenderer.on('inverted_pendulum:get:values', (event, values, isFinished) => {

    handleWorkFlow.handleReceivedValues( values, isFinished )
})


function drawBackground() {

    rectMode(CORNER);
    background(230, 230, 230);
    fill(210, 210, 210);
    strokeWeight(2);
    stroke(170);
    rect(0, 0, windowWidth, windowHeight);
}



function setup() {
        
    createCanvas(windowWidth, windowHeight);
    
    drawBackground();
    
    drawCart( 0, Math.PI )
}

function drawCart( x, th ) {

    push();
    translate(windowWidth/2, windowHeight/2)

    var pendx = x + L * Math.sin(th);
    var pendy = y + L * Math.cos(th);

    stroke(0);
    fill(255);

    rect(x - W/2, y - H/2, W, H)
    line( x, y, pendx, pendy )

    fill(0)
    ellipseMode(CENTER)
    circle( pendx, pendy, mr, mr )

    circle(x - 0.9 * W/2+wr/2, H+wr/2, wr, wr)
    circle(x + 0.9 * W/2-wr/2, H+wr/2, wr, wr)
    pop();
}


function draw() {


 
    // if(handleWorkFlow.isReadyToDraw == true) {
    if(handleWorkFlow.isStateDrawing()) {

        drawBackground();

        // var x  = inverted_pendulum.y[counter].get(0, 0)  * draw_scale;
        // var th = inverted_pendulum.y[counter].get(2, 0);
        // drawCart( x, th )

        // if(counter < inverted_pendulum.y.length - 40)
        //     counter += 40;

        var curr_counter_remote = ( handleWorkFlow.counter_remote < 0 ) ? 0 : handleWorkFlow.counter_remote;

        var x  = inverted_pendulum.y_remote[curr_counter_remote][0]  * draw_scale;
        var th = inverted_pendulum.y_remote[curr_counter_remote][1]
        drawCart( x, th )

        if(handleWorkFlow.counter_remote < inverted_pendulum.y_remote.length - 1)
            handleWorkFlow.counter_remote += 1;
        else
            handleWorkFlow.state2Finish();

    }
}

</script>













