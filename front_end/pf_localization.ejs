<%- include('./partial_imports/import_above_content.ejs', { Title: "Localization with Particle Filter", PageAddr: 'pf_localization' } ) %>


<!-- INLINE FORM ELELEMNTS -->
<div class="row mt">
    <div class="col-lg-12">
        <div class="form-panel">
        <h4 class="mb"><i class="fa fa-angle-right"></i> Connection Parameters</h4>

        <!-- <div class="row mt">
            <div class="col-lg-8">
                <div class="form-inline" role="form" class="col-sm-6">
                    <div class="form-group">
                        <input class="form-control" id="init_x" placeholder="Initial x Value">
                    </div>
                    <div class="form-group">
                        <input class="form-control" id="init_y" placeholder="Initial y Value">
                    </div>
                    <button class="btn btn-theme" id="btnInitial">Add Initial x & y with Mouse Click</button>
                </div>
            </div>
        </div> -->
        <!-- <div class="row mt">
            <div class="col-lg-8">
                <form class="form-inline" role="form" class="col-sm-6">
                    <div class="form-group">
                        <input class="form-control" id="std_x" placeholder="Std in x-direction">
                    </div>
                    <div class="form-group">
                        <input class="form-control" id="std_y" placeholder="Std in y-direction">
                    </div>
                </form>
            </div>
        </div> -->
        <!-- <div class="row mt">
            <div class="col-lg-8">
                <form class="form-inline" role="form">
                    <div class="form-group">
                        <input class="form-control" id="dt" placeholder="dt">
                    </div>
                    <div class="form-group">
                        <input class="form-control" id="process_noise" placeholder="Process Noise Magnitude">
                    </div>
                </form>
            </div>
        </div> -->

        <div class="row mt">
            <div class="form-group form-horizontal">
                <label class="col-sm-2 control-label"  style="padding-left: 20px; width: 16%;">IP</label>
                <div class="col-sm-4" style="padding-left: 0px;">
                    <input class="form-control" id="ip_id" placeholder="127.0.0.1" value="127.0.0.1">
                </div>
            </div>
        </div>

        <div class="row mt">
            <div class="form-group form-horizontal">
                <label class="col-sm-2 control-label"  style="padding-left: 20px; width: 16%;">Port</label>
                <div class="col-sm-4" style="padding-left: 0px;">
                    <input class="form-control" id="port_id" placeholder="5091" value="5091">
                </div>
            </div>
        </div>

        <div class="row mt">
            <div style="margin: 15px;">
                <button type="button" class="btn btn-primary" id="btnRun" >Run</button>
                <button type="button" class="btn btn-primary" id="btnStop" >Stop</button>
                <button type="button" class="btn btn-primary" id="btnReset" >Reset</button>
            </div>            
        </div>

        </div>
    </div>
</div>


<canvas class="webgl" id="threejs_canvas"> 
</canvas>

<br /> <br />

<main>
</main>

<%- include('./partial_imports/import_below_content.ejs') %>

<script type="text/javascript">

    const fs = require('fs')
    
    var Enum = require('enum');
    const THREE = require('three');
    
    require('../ekf_localization/GLTFLoader');
    require('../ekf_localization/OrbitControls');
    require('../ekf_localization/RoomEnvironment');
    
    const Ammo = require('../ekf_localization/ammo');
    require('../ekf_localization/Detector');
    require('../ekf_localization/stats.min');
    
    const { RenderHelper, Particle, Robot } = require('../classes/cls_pf_localization');

    $(document).ready( () => {
    
        $("#btnRun").click( () => {
    
            state = State.running;
            ip = $("#ip_id").val(); 
            port = $("#port_id").val();
            ipcRenderer.send('pf_localization:tcp:connect', ip, port);
        });
        
    });

    const scene = new THREE.Scene();
    const canvas = document.querySelector("canvas.webgl");
    let   renderHelper = new RenderHelper( scene, canvas );
    const clock = new THREE.Clock();


    var State = new Enum( { 

        'ready': 1,
        'pause': 2,
        'drawData': 3,
        'addData': 4,
        'addInitial': 5,
        'running': 7,
        'step': 8

    });

    var state = State.ready;

    var ip = "";
    var port = 0;

    let groundtruthPath = [];
    let particles = [];

    ipcRenderer.on('pf_localization:draw', (event, data) => {

        push();
            drawBackground();
            drawLegends();
            
            translate(width/2, height/2);
            rotate(-PI/2);

            drawObstacles();

            fill(0, 255, 0)
            stroke(0, 255, 0);

        var curr_particles = [];
        data = data.split(';')
        for(var i = 0; i < data.length; i++) {
            let particle = data[i].split(',');
            var x = parseInt( parseFloat( particle[0] ) )
            var y = parseInt( parseFloat( particle[1] ) )
            var theta = parseInt( parseFloat( particle[2] ) )
            curr_particles.push( new Particle(x, y, theta) )
            circle(x, y, 3);
        }

        fill(groundtruthColor[0], groundtruthColor[1], groundtruthColor[2], groundtruthColor[3])
        stroke(groundtruthColor[0], groundtruthColor[1], groundtruthColor[2], groundtruthColor[3])
        for(var i = 0; i < groundtruthPath.length; i++) {

            circle(groundtruthPath[i][0], groundtruthPath[i][1], 3);
            if(i > 0)
                line(groundtruthPath[i][0], groundtruthPath[i][1], groundtruthPath[i - 1][0], groundtruthPath[i - 1][1])
        }

        pop();
        particles = curr_particles;
    });


    function resetAllStates() {

        state = State.ready;
        predictedPath = [];
        groundtruthPath = [];
    }

    Ammo().then(function(Ammo) {

        // - Global variables -
        var DISABLE_DEACTIVATION = 4;
        var TRANSFORM_AUX = new Ammo.btTransform();
        var ZERO_QUATERNION = new THREE.Quaternion(0, 0, 0, 1);

        // Physics variables
        var collisionConfiguration;
        var dispatcher;
        var broadphase;
        var solver;
        var physicsWorld;

        var syncList = [];
        var time = 0;
        var objectTimePeriod = 3;
        var timeNextSpawn = time + objectTimePeriod;
        var maxNumObjects = 30;

        // Keybord actions
        var actions = {};
        var keysActions = {
            "KeyW":'acceleration',
            "KeyS":'braking',
            "KeyA":'left',
            "KeyD":'right'
        };


        function keyup(e) {
            if(keysActions[e.code]) {
                actions[keysActions[e.code]] = false;
                e.preventDefault();
                e.stopPropagation();
                return false;
            }
        }

        function keydown(e) {
            if(keysActions[e.code]) {
                actions[keysActions[e.code]] = true;
                e.preventDefault();
                e.stopPropagation();
                return false;
            }
        }


        function initPhysics() {

            // Physics configuration
            collisionConfiguration = new Ammo.btDefaultCollisionConfiguration();
            dispatcher = new Ammo.btCollisionDispatcher( collisionConfiguration );
            broadphase = new Ammo.btDbvtBroadphase();
            solver = new Ammo.btSequentialImpulseConstraintSolver();
            physicsWorld = new Ammo.btDiscreteDynamicsWorld( dispatcher, broadphase, solver, collisionConfiguration );
            physicsWorld.setGravity( new Ammo.btVector3( 0, -9.82, 0 ) );

            window.addEventListener( 'keydown', keydown);
            window.addEventListener( 'keyup', keyup);
        }

        function createBox(pos, quat, w, l, h, mass, friction) {

            var material = mass > 0 ? renderHelper.materialDynamic : renderHelper.materialStatic;
            var shape = new THREE.BoxGeometry(w, l, h, 1, 1, 1);
            var geometry = new Ammo.btBoxShape(new Ammo.btVector3(w * 0.5, l * 0.5, h * 0.5));

            if(!mass) mass = 0;
            if(!friction) friction = 1;

            var mesh = new THREE.Mesh(shape, material);
            mesh.position.copy(pos);
            mesh.quaternion.copy(quat);
            scene.add( mesh );

            var transform = new Ammo.btTransform();
            transform.setIdentity();
            transform.setOrigin(new Ammo.btVector3(pos.x, pos.y, pos.z));
            transform.setRotation(new Ammo.btQuaternion(quat.x, quat.y, quat.z, quat.w));
            var motionState = new Ammo.btDefaultMotionState(transform);

            var localInertia = new Ammo.btVector3(0, 0, 0);
            geometry.calculateLocalInertia(mass, localInertia);

            var rbInfo = new Ammo.btRigidBodyConstructionInfo(mass, motionState, geometry, localInertia);
            var body = new Ammo.btRigidBody(rbInfo);

            body.setFriction(friction);
            //body.setRestitution(.9);
            //body.setDamping(0.2, 0.2);

            physicsWorld.addRigidBody( body );

            if (mass > 0) {
                body.setActivationState(DISABLE_DEACTIVATION);
                // Sync physics and graphics
                function sync(dt) {
                    var ms = body.getMotionState();
                    if (ms) {
                        ms.getWorldTransform(TRANSFORM_AUX);
                        var p = TRANSFORM_AUX.getOrigin();
                        var q = TRANSFORM_AUX.getRotation();
                        mesh.position.set(p.x(), p.y(), p.z());
                        mesh.quaternion.set(q.x(), q.y(), q.z(), q.w());
                    }
                }

                syncList.push(sync);
            }
        }


        function createVehicle(pos, quat) {


            var chassisWidth = 16;
            var chassisHeight = 2.5;
            var chassisLength = 40;
            var massVehicle = 800;

            var wheelAxisPositionBack = -12;
            var wheelHalfTrackBack = 8;
            var wheelAxisHeightBack = -1;
            var wheelRadiusBack = 2;
            var wheelWidthBack = 1;

            var wheelAxisFrontPosition = 12;
            var wheelHalfTrackFront = 8;
            var wheelAxisHeightFront = -1;
            var wheelRadiusFront = 2;
            var wheelWidthFront = 1;

            var friction = 100;
            var suspensionStiffness = 20.0;
            var suspensionDamping = 2.3;
            var suspensionCompression = 4.4;
            var suspensionRestLength = 0.6;
            // var rollInfluence = 0.2;
            var rollInfluence = 0.1;

            var steeringIncrement = .04;
            var steeringClamp = .5;
            var maxEngineForce = 700;
            var maxBreakingForce = 100;


            // Chassis
            var geometry = new Ammo.btBoxShape(new Ammo.btVector3(chassisWidth * .5, chassisHeight * .5, chassisLength * .5));
            var transform = new Ammo.btTransform();
            transform.setIdentity();
            transform.setOrigin(new Ammo.btVector3(pos.x, pos.y, pos.z));
            transform.setRotation(new Ammo.btQuaternion(quat.x, quat.y, quat.z, quat.w));
            var motionState = new Ammo.btDefaultMotionState(transform);
            var localInertia = new Ammo.btVector3(0, 0, 0);
            geometry.calculateLocalInertia(massVehicle, localInertia);
            var body = new Ammo.btRigidBody(new Ammo.btRigidBodyConstructionInfo(massVehicle, motionState, geometry, localInertia));
            body.setActivationState(DISABLE_DEACTIVATION);
            physicsWorld.addRigidBody(body);
            var chassisMesh = renderHelper.createChassisMesh( chassisWidth, chassisHeight, chassisLength );

            // Raycast Vehicle
            var engineForce = 0;
            var vehicleSteering = 0;
            var breakingForce = 0;
            var tuning = new Ammo.btVehicleTuning();
            var rayCaster = new Ammo.btDefaultVehicleRaycaster(physicsWorld);
            var vehicle = new Ammo.btRaycastVehicle(tuning, body, rayCaster);
            window.vehicle = vehicle;
            vehicle.setCoordinateSystem(0, 1, 2);
            physicsWorld.addAction(vehicle);

            // Wheels
            var FRONT_LEFT = 0;
            var FRONT_RIGHT = 1;
            var BACK_LEFT = 2;
            var BACK_RIGHT = 3;
            var wheelMeshes = [];
            var wheelDirectionCS0 = new Ammo.btVector3(0, -1, 0);
            var wheelAxleCS = new Ammo.btVector3(-1, 0, 0);

            function addWheel(isFront, pos, radius, width, index) {

                var wheelInfo = vehicle.addWheel(
                        pos,
                        wheelDirectionCS0,
                        wheelAxleCS,
                        suspensionRestLength,
                        radius,
                        tuning,
                        isFront);

                wheelInfo.set_m_suspensionStiffness(suspensionStiffness);
                wheelInfo.set_m_wheelsDampingRelaxation(suspensionDamping);
                wheelInfo.set_m_wheelsDampingCompression(suspensionCompression);
                wheelInfo.set_m_frictionSlip(friction);
                wheelInfo.set_m_rollInfluence(rollInfluence);

                wheelMeshes[index] = renderHelper.createWheelMesh( radius, width );
            }


            addWheel(true, new Ammo.btVector3(wheelHalfTrackFront, wheelAxisHeightFront, wheelAxisFrontPosition), wheelRadiusFront, wheelWidthFront, FRONT_LEFT);
            addWheel(true, new Ammo.btVector3(-wheelHalfTrackFront, wheelAxisHeightFront, wheelAxisFrontPosition), wheelRadiusFront, wheelWidthFront, FRONT_RIGHT);
            addWheel(false, new Ammo.btVector3(-wheelHalfTrackBack, wheelAxisHeightBack, wheelAxisPositionBack), wheelRadiusBack, wheelWidthBack, BACK_LEFT);
            addWheel(false, new Ammo.btVector3(wheelHalfTrackBack, wheelAxisHeightBack, wheelAxisPositionBack), wheelRadiusBack, wheelWidthBack, BACK_RIGHT);

            window.wheels = wheelMeshes;
            var lastCoeff = 0;

            // Sync keybord actions and physics and graphics
            function sync(dt) {

                var speed = vehicle.getCurrentSpeedKmHour();
                // console.log(speed);

                // speedometer.innerHTML = (speed < 0 ? '(R) ' : '') + Math.abs(speed).toFixed(1) + ' km/h';

                breakingForce = 0;
                engineForce = 0;

                if (actions.acceleration) {
                    if (speed < -1)
                        breakingForce = maxBreakingForce;
                    else engineForce = maxEngineForce;
                }
                if (actions.braking) {
                    if (speed > 1)
                        breakingForce = maxBreakingForce;
                    else engineForce = -maxEngineForce / 2;
                }
                if (actions.left) {
                    if (vehicleSteering < steeringClamp)
                        vehicleSteering += steeringIncrement;
                }
                else {
                    if (actions.right) {
                        if (vehicleSteering > -steeringClamp)
                            vehicleSteering -= steeringIncrement;
                    }
                    else {
                        if (vehicleSteering < -steeringIncrement)
                            vehicleSteering += steeringIncrement;
                        else {
                            if (vehicleSteering > steeringIncrement)
                                vehicleSteering -= steeringIncrement;
                            else {
                                vehicleSteering = 0;
                            }
                        }
                    }
                }


                if(speed > 900) 
                    engineForce = 0;

                vehicle.applyEngineForce(engineForce, BACK_LEFT);
                vehicle.applyEngineForce(engineForce, BACK_RIGHT);

                vehicle.setBrake(breakingForce / 2, FRONT_LEFT);
                vehicle.setBrake(breakingForce / 2, FRONT_RIGHT);
                vehicle.setBrake(breakingForce, BACK_LEFT);
                vehicle.setBrake(breakingForce, BACK_RIGHT);

                vehicle.setSteeringValue(vehicleSteering, FRONT_LEFT);
                vehicle.setSteeringValue(vehicleSteering, FRONT_RIGHT);


                let pre_fr_y = wheelMeshes[0].rotation.y;

                var tm, p, q, i;
                var n = vehicle.getNumWheels();
                for (i = 0; i < n; i++) {
                    vehicle.updateWheelTransform(i, true);
                    tm = vehicle.getWheelTransformWS(i);
                    p = tm.getOrigin();
                    q = tm.getRotation();
                    wheelMeshes[i].position.set(p.x(), p.y(), p.z());
                    wheelMeshes[i].quaternion.set(q.x(), q.y(), q.z(), q.w());
                    

                    if(renderHelper.tyres.length == 0)
                        continue;


                    if(i < 2) {
                        if(vehicleSteering > 0)
                            renderHelper.tyres[i].rotation.z = Math.PI / 6;
                        else if(vehicleSteering < 0)
                            renderHelper.tyres[i].rotation.z = -Math.PI / 6;
                        else
                            renderHelper.tyres[i].rotation.z = 0;
                    }

                    if(Math.abs(speed) < 1.2)
                        continue;

                    var sclRotation = 0.02 * ( (speed / 15) + 1 );
                    if(engineForce > 0) {
                        renderHelper.tyres[i].rotation.x += sclRotation;
                        lastCoeff = 1;
                    } else if(engineForce < 0) {
                        renderHelper.tyres[i].rotation.x -= sclRotation;
                        lastCoeff = -1;
                    } else {
                        renderHelper.tyres[i].rotation.x += lastCoeff * sclRotation;
                    }

                }

                tm = vehicle.getChassisWorldTransform();
                p = tm.getOrigin();
                q = tm.getRotation();
                chassisMesh.position.set(p.x(), p.y(), p.z());
                chassisMesh.quaternion.set(q.x(), q.y(), q.z(), q.w());
            }

            syncList.push(sync);
        }

        var animate = function () {

            requestAnimationFrame(animate);
            var dt = clock.getDelta();

            for (var i = 0; i < syncList.length; i++)
                syncList[i](dt);

            physicsWorld.stepSimulation( dt, 10 );
            let vPos = vehicle.getChassisWorldTransform().getOrigin();
            let vRot = vehicle.getChassisWorldTransform().getRotation();
            // chassisMesh.quaternion.set(q.x(), q.y(), q.z(), q.w());
            if(renderHelper.car !== null) {
                renderHelper.car.position.set(vPos.x(), vPos.y()-5, vPos.z());
                renderHelper.car.quaternion.set(vRot.x(), vRot.y(), vRot.z(), vRot.w());
            }

            renderHelper.renderer.render( scene, renderHelper.camera );
        };

        // initPhysicsGraphics();
        initPhysics();
        createBox(new THREE.Vector3(0, -0.5, 0), ZERO_QUATERNION, 550, 5, 550, 0, 2);
    
        var quaternion = new THREE.Quaternion(0, 0, 0, 1);
        quaternion.setFromAxisAngle(new THREE.Vector3(0, 1, 0), Math.PI / 2);
        
        createVehicle(new THREE.Vector3(0, 5, 0), quaternion);

        createBox(new THREE.Vector3(100, 7, 70), ZERO_QUATERNION, 10, 10, 30, 0, 0);
        createBox(new THREE.Vector3(-140, 5, -80), ZERO_QUATERNION, 10, 10, 60, 0, 0);
        createBox(new THREE.Vector3(-50, 3, 200), ZERO_QUATERNION, 80, 5, 5, 0, 0);
        createBox(new THREE.Vector3(90, 7, -90), ZERO_QUATERNION, 20, 20, 20, 0, 0);

        createBox(new THREE.Vector3(260, 5, 5), ZERO_QUATERNION, 10, 15, 500, 0, 0);
        createBox(new THREE.Vector3(-260, 5, 5), ZERO_QUATERNION, 10, 15, 500, 0, 0);
        createBox(new THREE.Vector3(5, 5, -260), ZERO_QUATERNION, 500, 15, 10, 0, 0);
        createBox(new THREE.Vector3(5, 5, 260), ZERO_QUATERNION, 500, 15, 10, 0, 0);

        animate();

    });


    var tid = setTimeout(carMoveMonitor, 1000);
    var startX = null;
    var startY = null;
    var isPrior = true;

    const landmarks = [ 
        [ 100,   150,  0],  [ 110,   150,  0],  [ 100,   160,   0],  [ 110,   160,  0],
        [-100,   150,  0],  [-100,   160,  0],  [-100,   170,   0],  [-100,   180,  0],
        [-90,    180,  0],  [-100,  -150,  0],  [-110,  -150,   0],  [-120,  -150,  0],
        [-130,  -150,  0],  [ 100,  -110,  0],  [ 100,  -120,   0],  [ 100,  -130,  0],
        [ 100,  -140,  0]
    ]

    function measureEachParticle( item ) {
     
        var currMeasurements = ""
        for(var i = 0; i < landmarks.length; i++) {

            const landmark = landmarks[i];
            const diff_x = landmark[0] - item.x;
            const diff_y = landmark[1] - item.y;
            var distance = Math.sqrt( Math.pow(diff_x, 2) + Math.pow(diff_y, 2) );
            var angle = Math.atan2(diff_y, diff_x);
            angle = angle - landmark[2];
            if(angle > Math.PI * 2)
                angle -= Math.PI * 2;
            else if(angle < -Math.PI * 2)
                angle += Math.PI * 2;

            distance = Math.round( distance )
            angle = Math.round( angle )

            if(currMeasurements != "")
                currMeasurements += ',';
            currMeasurements += `${distance},${angle}`;
        }
        return currMeasurements;
    }


    function measureParticles( particles ) {

        var allMeasurements = "";
        // console.log('particles in MeasureParticles', particles);
        for(var i = 0; i < particles.length; i++) {
            const particle = particles[i];
            var currMeasurements = measureEachParticle( particle )
            // console.log('currMeasurements ', currMeasurements)
            if(allMeasurements != "")
                allMeasurements += ";"
            allMeasurements += currMeasurements
        }
        return allMeasurements;
    }



    function carMoveMonitor() {
        
        if(renderHelper.car != null && state == State.running) {

            if(startX === null) {

                startX = renderHelper.car.position.x;
                startY = renderHelper.car.position.z;

            } else {
                // let content = `${car.position.x}, ${car.position.z}, ${car.rotation.y}\r\n`

                groundtruthPath.push( [ renderHelper.car.position.x, renderHelper.car.position.z ] );

                var currX = renderHelper.car.position.x - startX;
                var currY = renderHelper.car.position.z - startY;

                var r = Math.sqrt( Math.pow(currX, 2) + Math.pow(currY, 2) )
                // const noiseScale = 5;
                // r = ( r + Math.random() * noiseScale ) - (noiseScale / 2);

                var theta = Math.atan2(currY, currX);
                // if(theta > Math.PI)
                    // theta = abs(theta - Math.PI * 2)
                theta = (theta > 1e-4) ? theta : 1e-4;

                let u = `${r.toFixed(4)},${theta.toFixed(4)}`
                // console.log(u)
                
                const car_x = renderHelper.car.position.x;
                const car_z = renderHelper.car.position.z;

                const car_angle = ( renderHelper.car.rotation.y > 1e-4 ) ? renderHelper.car.rotation.y : 1e-4;

                if(isPrior == true) {

                    let init_pos = `${car_x.toFixed(4)},${car_z.toFixed(4)},${car_angle.toFixed(4)}`

                    ipcRenderer.send('pf_localization:tcp:send:prior', init_pos);
                    isPrior = false;

                    startX = renderHelper.car.position.x;
                    startY = renderHelper.car.position.z;

                } else {

                    if(particles.length != 0) {
                        
                        let robot_measure = measureEachParticle( new Robot(car_x, car_z, car_angle) );
                        let particles_measure = measureParticles( particles );
                        console.log('particles_measure ', particles_measure)
                        ipcRenderer.send('pf_localization:tcp:send:measurements', u, robot_measure, particles_measure);
                        particles = [];

                        startX = renderHelper.car.position.x;
                        startY = renderHelper.car.position.z;
                    }
                }

                // startX = renderHelper.car.position.x;
                // startY = renderHelper.car.position.z;
            }
        }
        tid = setTimeout(carMoveMonitor, 1000);
    }



    let measurementColor = [ 0, 0, 0, 170 ]
    let groundtruthColor = [ 0, 0, 255, 255 ]
    let particleColor = [ 0, 255, 0, 255 ]
    let measurementCircleRadius = 5

    function drawLegends() {

        fill(0, 102, 153);
        noStroke()
        textSize(12);
        textAlign(LEFT, CENTER);
        text('Ground Truth', 40, 30)
        text('Particles', 40, 50)

        fill(groundtruthColor[0], groundtruthColor[1], groundtruthColor[2], groundtruthColor[3])
        circle(20, 30, measurementCircleRadius)
        stroke(groundtruthColor[0], groundtruthColor[1], groundtruthColor[2], groundtruthColor[3])
        strokeWeight(1.5)
        line(10, 30, 30, 30)

        noStroke()
        fill(particleColor[0], particleColor[1], particleColor[2], particleColor[3])
        circle(20, 50, measurementCircleRadius)

    }

    function drawBackground() {

        rectMode(CORNER);
        background(230, 230, 230);
        fill(210, 210, 210);
        strokeWeight(2);
        stroke(170);
        rect(0, 0, 600, 600);

    }

    function drawObstacles() {

        rectMode(CORNER);
        fill(128);
        stroke(128);
        rect(100, 60, 10, 30);
        rect(-140, -100, 10, 40);
        rect(-82, 200, 70, 10);
        
        rectMode(CENTER);
        rect(90, -90, 25, 25);
    }

    function setup() {
        
        createCanvas(600, 600)
        
        drawBackground();
        drawLegends();
        
        // frameRate(3);
        console.log("Setup Running...")
        noLoop();
    }

    function draw() {
        
        push();
            drawBackground();
            drawLegends();
            
            translate(width/2, height/2);
            rotate(-PI/2);

            drawObstacles();
        pop();

        // fill(groundtruthColor[0], groundtruthColor[1], groundtruthColor[2], groundtruthColor[3])
        // stroke(groundtruthColor[0], groundtruthColor[1], groundtruthColor[2], groundtruthColor[3])
        // for(var i = 0; i < predictedPath.length; i++) {

        //     circle(groundtruthPath[i][0], groundtruthPath[i][1], 3);
        //     if(i > 0)
        //         line(groundtruthPath[i][0], groundtruthPath[i][1], groundtruthPath[i - 1][0], groundtruthPath[i - 1][1])
        // }


        // stroke(estimatedMeanColor[0], estimatedMeanColor[1], estimatedMeanColor[2], estimatedMeanColor[3])
        // fill(estimatedMeanColor[0], estimatedMeanColor[1], estimatedMeanColor[2], estimatedMeanColor[3])
        // for(var i = 0; i < predictedPath.length; i++) {
        //     circle(predictedPath[i][0], predictedPath[i][1], 3);
        // }
    }


</script>
    