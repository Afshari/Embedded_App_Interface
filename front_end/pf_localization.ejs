<%- include('./partial_imports/import_above_content.ejs', { Title: "Localization with Particle Filter", PageAddr: 'pf_localization' } ) %>


<!-- INLINE FORM ELELEMNTS -->
<!-- <div class="row mt">
    <div class="col-lg-12">
        <div class="form-panel">
        <h4 class="mb"><i class="fa fa-angle-right"></i> Kalman Parameters</h4>

        <div class="row mt">
            <div class="col-lg-8">
                <div class="form-inline" role="form" class="col-sm-6">
                    <div class="form-group">
                        <input class="form-control" id="init_x" placeholder="Initial x Value">
                    </div>
                    <div class="form-group">
                        <input class="form-control" id="init_y" placeholder="Initial y Value">
                    </div>
                    <button class="btn btn-theme" id="btnInitial">Add Initial x & y with Mouse Click</button>
                </div>
            </div>
        </div>
        <div class="row mt">
            <div class="col-lg-8">
                <form class="form-inline" role="form" class="col-sm-6">
                    <div class="form-group">
                        <input class="form-control" id="std_x" placeholder="Std in x-direction">
                    </div>
                    <div class="form-group">
                        <input class="form-control" id="std_y" placeholder="Std in y-direction">
                    </div>
                </form>
            </div>
        </div>
        <div class="row mt">
            <div class="col-lg-8">
                <form class="form-inline" role="form">
                    <div class="form-group">
                        <input class="form-control" id="dt" placeholder="dt">
                    </div>
                    <div class="form-group">
                        <input class="form-control" id="process_noise" placeholder="Process Noise Magnitude">
                    </div>
                </form>
            </div>
        </div>


        <div class="row mt">
            <div class="form-group form-horizontal">
                <label class="col-sm-2 control-label"  style="padding-left: 20px; width: 16%;">Connection Type</label>
                <div class="col-sm-4" style="padding-left: 0px;">
                    <select class="form-control" id="connection_type" style="padding-left: 0px;">
                        <option value="uart">UART</option>
                        <option value="tcp">TCP/IP</option>
                    </select>
                </div>
            </div>
        </div>

        <div class="row mt">
            <div class="form-group form-horizontal">
                <label class="col-sm-2 control-label"  style="padding-left: 20px; width: 16%;">UART</label>
                <div class="col-sm-4" style="padding-left: 0px;">
                    <select class="form-control" id="uart_select" style="padding-left: 0px;">
                    </select>
                </div>
                <button type="button" class="btn btn-primary" id="reloadUart">Reload</button>
            </div>
        </div>
        </div>
    </div>
</div> -->

<div style="margin: 5px;">
    <button type="button" class="btn btn-primary" id="btnRun" >Run</button>
    <button type="button" class="btn btn-primary" id="btnStop" >Stop</button>
    <button type="button" class="btn btn-primary" id="btnReset" >Reset</button>

</div>

<canvas class="webgl" id="threejs_canvas"> 
</canvas>

<br /> <br />

<main>
</main>

<%- include('./partial_imports/import_below_content.ejs') %>

<script type="text/javascript">

    const fs = require('fs')
    
    var Enum = require('enum');
    const THREE = require('three');
    
    require('../ekf_localization/GLTFLoader');
    require('../ekf_localization/OrbitControls');
    require('../ekf_localization/RoomEnvironment');
    
    const Ammo = require('../ekf_localization/ammo');
    require('../ekf_localization/Detector');
    require('../ekf_localization/stats.min');
    
    $(document).ready( () => {
    
        $("#btnRun").click( () => {
    
            state = State.running;
            ipcRenderer.send('ekf_localization:tcp:connect');
        });
        
    });
    
    function addLight( scene ) {

        const pmremGenerator = new THREE.PMREMGenerator( renderer );
        scene.environment = pmremGenerator.fromScene( new THREE.RoomEnvironment(), 0.4 ).texture;

        var ambient = new THREE.AmbientLight( 0x666666 );
        scene.add( ambient );

        const light = new THREE.DirectionalLight( 0xdfebff, 1 );
        light.position.set( 50, 200, 100 );
        light.position.multiplyScalar( 1.3 );

        light.castShadow = true;

        light.shadow.mapSize.width = 1024;
        light.shadow.mapSize.height = 1024;

        const d = 300;

        light.shadow.camera.left = - d;
        light.shadow.camera.right = d;
        light.shadow.camera.top = d;
        light.shadow.camera.bottom = - d;

        light.shadow.camera.far = 1000;
        scene.add( light );
    }

    function addCube(cube, x, z, y=300) {
        cube.position.x = x
        cube.position.y = y
        cube.position.z = z
        scene.add(cube);
    }

    function addCamera( canvas ) {

        let camera = new THREE.PerspectiveCamera( 30, window.innerWidth / window.innerHeight, 0.1, 2500 );
        camera.position.set( 688, 114, 0 );

        const controls = new THREE.OrbitControls(camera, canvas)
        controls.maxPolarAngle = Math.PI * 0.45;
        controls.minPolarAngle = Math.PI * 0.2;
        controls.minDistance = 1;
        controls.maxDistance = 700;

        return camera;
    }

    function addRenderer( canvas, windowWidth, windowHeight ) {

        var renderer = new THREE.WebGLRenderer({ canvas: canvas });

        renderer.setSize(windowWidth, windowHeight);
        renderer.outputEncoding = THREE.sRGBEncoding;
        renderer.shadowMap.enabled = true;

        return renderer;
    }

    function addFloor( scene, textureLoader ) {

        const groundTexture = textureLoader.load( '../ekf_localization/textures/granite_seamless_gravel.jpg' );
        groundTexture.wrapS = groundTexture.wrapT = THREE.RepeatWrapping;
        groundTexture.repeat.set( 100, 100 );
        groundTexture.anisotropy = 100;
        groundTexture.encoding = THREE.sRGBEncoding;

        const groundMaterial = new THREE.MeshLambertMaterial( { map: groundTexture } );

        // Floor 
        let floor = new THREE.Mesh( new THREE.PlaneGeometry( 4000, 4000 ), groundMaterial );
        floor.rotation.x = - Math.PI / 2;
        floor.receiveShadow = true;
        scene.add( floor );
    }

    let car = null;
    let tyres = []
    
    function addCar( scene ) {
        
        loader.load( '../ekf_localization/truck_gmc/truck.gltf', function ( gltf ) {

            car = gltf.scene;
            car.rotation.y = Math.PI/2;
            gltf.scene.scale.set(0.1, 0.1, 0.1);
            gltf.scene.scale.set(0.2, 0.2, 0.2);
            
            tyre_fr = car.children[0].children[0].children[0].children[0].children[0].children[1];
            tyre_fl = car.children[0].children[0].children[0].children[0].children[0].children[4];
            tyre_bl = car.children[0].children[0].children[0].children[0].children[0].children[2];
            tyre_br = car.children[0].children[0].children[0].children[0].children[0].children[3];

            tyre_fr.rotation.order = 'YZX';
            tyre_fl.rotation.order = 'YZX';
            tyre_bl.rotation.order = 'YZX';
            tyre_br.rotation.order = 'YZX';

            tyres.push(tyre_fr)
            tyres.push(tyre_fl)
            tyres.push(tyre_bl)
            tyres.push(tyre_br)

            scene.add(car);

        }, undefined, function ( error ) {
            console.error( error );
        } );
    }

    // let cube_1 = null;
    // let cube_2 = null;
    // let cube_1_arr = null;
    
    function addLandmarkBox( scene ) {
        
        loader.load( '../ekf_localization/dirty_brick_mats/scene.gltf', function ( gltf ) {

            gltf.scene.rotation.y = Math.PI/2;

            var cube_1 = gltf.scene.children[0].children[0].children[0].children[0];
            var cube_2 = gltf.scene.children[0].children[0].children[0].children[1];

            cube_1.scale.set(0.05, 0.05, 0.05);
            cube_2.scale.set(0.1, 0.1, 0.1);
            cube_2.position.y = 300;

            var cube_1_1 = cube_1.clone();
            var cube_1_2 = cube_1.clone();
            var cube_1_3 = cube_1.clone();
            var cube_1_4 = cube_1.clone();

            addCube(cube_1_1, 100, 60, 7);        
            addCube(cube_1_2, 100, 70, 7);
            addCube(cube_1_3, 100, 80, 7);
            addCube(cube_1_4, 100, 67, 14);

            addCube(cube_2.clone(), 90, -90, 10);

        }, undefined, function ( error ) {
            console.error( error );
        } );
    }

    function addWall( scene ) {

        loader.load( '../ekf_localization/damaged_wall/scene.gltf', function ( gltf ) {

            gltf.scene.rotation.y = Math.PI/2;

            var wall = gltf.scene;

            for(var i = 0; i < 13; i++) {

                let wall_back = wall.clone();
                wall_back.scale.set(0.2, 0.2, 0.2);
                wall_back.position.set(260, 0, (i*40)-240);
                scene.add(wall_back);

                let wall_front = wall.clone();
                wall_front.scale.set(0.2, 0.2, 0.2);
                wall_front.position.set(-260, 0, (i*40)-240);
                scene.add(wall_front);

                let wall_left = wall.clone();
                wall_left.rotation.y = Math.PI;
                wall_left.scale.set(0.2, 0.2, 0.2);
                // wall_left.position.set(-250, 0, (i*40)-240);
                wall_left.position.set(-(i*40)+240, 0, -260);
                scene.add(wall_left);


                let wall_right = wall.clone();
                wall_right.rotation.y = Math.PI;
                wall_right.scale.set(0.2, 0.2, 0.2);
                wall_right.position.set((i*40)-240, 0, 260);
                scene.add(wall_right);

            }

        }, undefined, function ( error ) {
            console.error( error );
        } );
    }

    function addConcrete( scene ) {

        loader.load( '../ekf_localization/concrete_block_low_poly/scene.gltf', function ( gltf ) {

            var bx = gltf.scene;
            bx.scale.set(10, 10, 10);
            
            var cube_1 = gltf.scene.clone();
            var cube_2 = gltf.scene.clone();
            var cube_3 = gltf.scene.clone();

            addCube(cube_1, -140, -60,  5);
            addCube(cube_2, -140, -100, 5);
            addCube(cube_3, -140, -80,  5);

        }, undefined, function ( error ) {
            console.error( error );
        } );
    }

    function addConcreteDivider( scene ) {

        loader.load( '../ekf_localization/concrete_road_divider__game/scene.gltf', function ( gltf ) {

            gltf.scene.rotation.y = Math.PI/2;
            
            var bx = gltf.scene;
            bx.scale.set(20, 20, 20);
            
            var cube_1 = gltf.scene.clone();
            var cube_2 = gltf.scene.clone();
            var cube_3 = gltf.scene.clone();
            var cube_4 = gltf.scene.clone();
            var cube_5 = gltf.scene.clone();

            addCube(cube_1, -50, 200, 0);
            addCube(cube_2, -34, 200, 0);
            addCube(cube_3, -66, 200, 0);
            addCube(cube_4, -82, 200, 0);
            addCube(cube_5, -18, 200, 0);        

        }, undefined, function ( error ) {
            console.error( error );
        } );
    }

    function createWheelMesh( scene, radius, width, materialInteractive ) {

        var t = new THREE.CylinderGeometry(radius, radius, width, 24, 1);
        t.rotateZ(Math.PI / 2);
        var mesh = new THREE.Mesh(t, materialInteractive);
        mesh.add(new THREE.Mesh(new THREE.BoxGeometry(width * 1.5, radius * 1.75, radius*.25, 1, 1, 1), materialInteractive));
        scene.add(mesh);
        return mesh;
    }

    function createChassisMesh( scene, w, l, h, materialInteractive ) {

        var shape = new THREE.BoxGeometry(w, l, h, 1, 1, 1);
        var mesh = new THREE.Mesh(shape, materialInteractive);
        scene.add(mesh);
        return mesh;
    }




    const scene = new THREE.Scene();
    scene.background = new THREE.Color( 0xcce0ff );
    scene.fog = new THREE.Fog( 0xcce0ff, 10, 2500 );
    const axesHelper = new THREE.AxesHelper( 200 );
    const loader = new THREE.GLTFLoader();
    const canvas = document.querySelector("canvas.webgl");

    const clock = new THREE.Clock();

    const textureLoader = new THREE.TextureLoader();

    // Create box
    const boxGeometry = new THREE.BoxBufferGeometry(1, 1, 1)
    const boxMaterial = new THREE.MeshStandardMaterial({
        metalness: 0.3,
        roughness: 0.4
    })

    var State = new Enum( { 

        'ready': 1,
        'pause': 2,
        'drawData': 3,
        'addData': 4,
        'addInitial': 5,
        'running': 7,
        'step': 8

    } )
    var state = State.ready;

    let predictedPath = []
    let groundtruthPath = []

    ipcRenderer.on('ekf_localization:draw', (event, x, y, angle) => {

        predictedPath.push( [x, y] )
    });


    function resetAllStates() {

        state = State.ready;
        predictedPath = [];
        groundtruthPath = [];
    }

    const windowWidth = 900;
    const windowHeight = 600;

    let camera = addCamera( canvas );
    let renderer = addRenderer( canvas, windowWidth, windowHeight );

    addFloor( scene, textureLoader );
    addLight( scene );
    addCar( scene );
    addLandmarkBox( scene );
    addWall( scene );
    addConcrete( scene );
    addConcreteDivider( scene );


    Ammo().then(function(Ammo) {


        var materialDynamic, materialStatic, materialInteractive;

        // - Global variables -
        var DISABLE_DEACTIVATION = 4;
        var TRANSFORM_AUX = new Ammo.btTransform();
        var ZERO_QUATERNION = new THREE.Quaternion(0, 0, 0, 1);

        // Physics variables
        var collisionConfiguration;
        var dispatcher;
        var broadphase;
        var solver;
        var physicsWorld;

        var syncList = [];
        var time = 0;
        var objectTimePeriod = 3;
        var timeNextSpawn = time + objectTimePeriod;
        var maxNumObjects = 30;

        // Keybord actions
        var actions = {};
        var keysActions = {
            "KeyW":'acceleration',
            "KeyS":'braking',
            "KeyA":'left',
            "KeyD":'right'
        };


        function initPhysicsGraphics() {

            materialDynamic = new THREE.MeshPhongMaterial( { color:0xfca400 } );
            materialStatic = new THREE.MeshPhongMaterial( { color:0x999999 } );
            materialInteractive =new THREE.MeshPhongMaterial( { color:0x990000 } );

            materialDynamic.wireframe = true;
            materialStatic.wireframe = true;
            materialInteractive.wireframe = true;

            materialDynamic.visible = true;
            materialStatic.visible = true;
            materialInteractive.visible = true;

            window.addEventListener( 'keydown', keydown);
            window.addEventListener( 'keyup', keyup);
        }

        function keyup(e) {
            if(keysActions[e.code]) {
                actions[keysActions[e.code]] = false;
                e.preventDefault();
                e.stopPropagation();
                return false;
            }
        }

        function keydown(e) {
            if(keysActions[e.code]) {
                actions[keysActions[e.code]] = true;
                e.preventDefault();
                e.stopPropagation();
                return false;
            }
        }


        function initPhysics() {

            // Physics configuration
            collisionConfiguration = new Ammo.btDefaultCollisionConfiguration();
            dispatcher = new Ammo.btCollisionDispatcher( collisionConfiguration );
            broadphase = new Ammo.btDbvtBroadphase();
            solver = new Ammo.btSequentialImpulseConstraintSolver();
            physicsWorld = new Ammo.btDiscreteDynamicsWorld( dispatcher, broadphase, solver, collisionConfiguration );
            physicsWorld.setGravity( new Ammo.btVector3( 0, -9.82, 0 ) );
        }

        function createBox(pos, quat, w, l, h, mass, friction) {

            var material = mass > 0 ? materialDynamic : materialStatic;
            var shape = new THREE.BoxGeometry(w, l, h, 1, 1, 1);
            var geometry = new Ammo.btBoxShape(new Ammo.btVector3(w * 0.5, l * 0.5, h * 0.5));

            if(!mass) mass = 0;
            if(!friction) friction = 1;

            var mesh = new THREE.Mesh(shape, material);
            mesh.position.copy(pos);
            mesh.quaternion.copy(quat);
            scene.add( mesh );

            var transform = new Ammo.btTransform();
            transform.setIdentity();
            transform.setOrigin(new Ammo.btVector3(pos.x, pos.y, pos.z));
            transform.setRotation(new Ammo.btQuaternion(quat.x, quat.y, quat.z, quat.w));
            var motionState = new Ammo.btDefaultMotionState(transform);

            var localInertia = new Ammo.btVector3(0, 0, 0);
            geometry.calculateLocalInertia(mass, localInertia);

            var rbInfo = new Ammo.btRigidBodyConstructionInfo(mass, motionState, geometry, localInertia);
            var body = new Ammo.btRigidBody(rbInfo);

            body.setFriction(friction);
            //body.setRestitution(.9);
            //body.setDamping(0.2, 0.2);

            physicsWorld.addRigidBody( body );

            if (mass > 0) {
                body.setActivationState(DISABLE_DEACTIVATION);
                // Sync physics and graphics
                function sync(dt) {
                    var ms = body.getMotionState();
                    if (ms) {
                        ms.getWorldTransform(TRANSFORM_AUX);
                        var p = TRANSFORM_AUX.getOrigin();
                        var q = TRANSFORM_AUX.getRotation();
                        mesh.position.set(p.x(), p.y(), p.z());
                        mesh.quaternion.set(q.x(), q.y(), q.z(), q.w());
                    }
                }

                syncList.push(sync);
            }
        }


        function createVehicle(pos, quat) {


            var chassisWidth = 16;
            var chassisHeight = 2.5;
            var chassisLength = 40;
            var massVehicle = 800;

            var wheelAxisPositionBack = -12;
            var wheelHalfTrackBack = 8;
            var wheelAxisHeightBack = -1;
            var wheelRadiusBack = 2;
            var wheelWidthBack = 1;

            var wheelAxisFrontPosition = 12;
            var wheelHalfTrackFront = 8;
            var wheelAxisHeightFront = -1;
            var wheelRadiusFront = 2;
            var wheelWidthFront = 1;

            var friction = 100;
            var suspensionStiffness = 20.0;
            var suspensionDamping = 2.3;
            var suspensionCompression = 4.4;
            var suspensionRestLength = 0.6;
            // var rollInfluence = 0.2;
            var rollInfluence = 0.1;

            var steeringIncrement = .04;
            var steeringClamp = .5;
            var maxEngineForce = 700;
            var maxBreakingForce = 100;


            // Chassis
            var geometry = new Ammo.btBoxShape(new Ammo.btVector3(chassisWidth * .5, chassisHeight * .5, chassisLength * .5));
            var transform = new Ammo.btTransform();
            transform.setIdentity();
            transform.setOrigin(new Ammo.btVector3(pos.x, pos.y, pos.z));
            transform.setRotation(new Ammo.btQuaternion(quat.x, quat.y, quat.z, quat.w));
            var motionState = new Ammo.btDefaultMotionState(transform);
            var localInertia = new Ammo.btVector3(0, 0, 0);
            geometry.calculateLocalInertia(massVehicle, localInertia);
            var body = new Ammo.btRigidBody(new Ammo.btRigidBodyConstructionInfo(massVehicle, motionState, geometry, localInertia));
            body.setActivationState(DISABLE_DEACTIVATION);
            physicsWorld.addRigidBody(body);
            var chassisMesh = createChassisMesh( scene, chassisWidth, chassisHeight, chassisLength, materialInteractive );

            // Raycast Vehicle
            var engineForce = 0;
            var vehicleSteering = 0;
            var breakingForce = 0;
            var tuning = new Ammo.btVehicleTuning();
            var rayCaster = new Ammo.btDefaultVehicleRaycaster(physicsWorld);
            var vehicle = new Ammo.btRaycastVehicle(tuning, body, rayCaster);
            window.vehicle = vehicle;
            vehicle.setCoordinateSystem(0, 1, 2);
            physicsWorld.addAction(vehicle);

            // Wheels
            var FRONT_LEFT = 0;
            var FRONT_RIGHT = 1;
            var BACK_LEFT = 2;
            var BACK_RIGHT = 3;
            var wheelMeshes = [];
            var wheelDirectionCS0 = new Ammo.btVector3(0, -1, 0);
            var wheelAxleCS = new Ammo.btVector3(-1, 0, 0);

            function addWheel(isFront, pos, radius, width, index) {

                var wheelInfo = vehicle.addWheel(
                        pos,
                        wheelDirectionCS0,
                        wheelAxleCS,
                        suspensionRestLength,
                        radius,
                        tuning,
                        isFront);

                wheelInfo.set_m_suspensionStiffness(suspensionStiffness);
                wheelInfo.set_m_wheelsDampingRelaxation(suspensionDamping);
                wheelInfo.set_m_wheelsDampingCompression(suspensionCompression);
                wheelInfo.set_m_frictionSlip(friction);
                wheelInfo.set_m_rollInfluence(rollInfluence);

                wheelMeshes[index] = createWheelMesh( scene, radius, width, materialInteractive );
            }


            addWheel(true, new Ammo.btVector3(wheelHalfTrackFront, wheelAxisHeightFront, wheelAxisFrontPosition), wheelRadiusFront, wheelWidthFront, FRONT_LEFT);
            addWheel(true, new Ammo.btVector3(-wheelHalfTrackFront, wheelAxisHeightFront, wheelAxisFrontPosition), wheelRadiusFront, wheelWidthFront, FRONT_RIGHT);
            addWheel(false, new Ammo.btVector3(-wheelHalfTrackBack, wheelAxisHeightBack, wheelAxisPositionBack), wheelRadiusBack, wheelWidthBack, BACK_LEFT);
            addWheel(false, new Ammo.btVector3(wheelHalfTrackBack, wheelAxisHeightBack, wheelAxisPositionBack), wheelRadiusBack, wheelWidthBack, BACK_RIGHT);

            window.wheels = wheelMeshes;
            var lastCoeff = 0;

            // Sync keybord actions and physics and graphics
            function sync(dt) {

                var speed = vehicle.getCurrentSpeedKmHour();
                // console.log(speed);

                // speedometer.innerHTML = (speed < 0 ? '(R) ' : '') + Math.abs(speed).toFixed(1) + ' km/h';

                breakingForce = 0;
                engineForce = 0;

                if (actions.acceleration) {
                    if (speed < -1)
                        breakingForce = maxBreakingForce;
                    else engineForce = maxEngineForce;
                }
                if (actions.braking) {
                    if (speed > 1)
                        breakingForce = maxBreakingForce;
                    else engineForce = -maxEngineForce / 2;
                }
                if (actions.left) {
                    if (vehicleSteering < steeringClamp)
                        vehicleSteering += steeringIncrement;
                }
                else {
                    if (actions.right) {
                        if (vehicleSteering > -steeringClamp)
                            vehicleSteering -= steeringIncrement;
                    }
                    else {
                        if (vehicleSteering < -steeringIncrement)
                            vehicleSteering += steeringIncrement;
                        else {
                            if (vehicleSteering > steeringIncrement)
                                vehicleSteering -= steeringIncrement;
                            else {
                                vehicleSteering = 0;
                            }
                        }
                    }
                }


                if(speed > 900) 
                    engineForce = 0;

                vehicle.applyEngineForce(engineForce, BACK_LEFT);
                vehicle.applyEngineForce(engineForce, BACK_RIGHT);

                vehicle.setBrake(breakingForce / 2, FRONT_LEFT);
                vehicle.setBrake(breakingForce / 2, FRONT_RIGHT);
                vehicle.setBrake(breakingForce, BACK_LEFT);
                vehicle.setBrake(breakingForce, BACK_RIGHT);

                vehicle.setSteeringValue(vehicleSteering, FRONT_LEFT);
                vehicle.setSteeringValue(vehicleSteering, FRONT_RIGHT);


                let pre_fr_y = wheelMeshes[0].rotation.y;

                var tm, p, q, i;
                var n = vehicle.getNumWheels();
                for (i = 0; i < n; i++) {
                    vehicle.updateWheelTransform(i, true);
                    tm = vehicle.getWheelTransformWS(i);
                    p = tm.getOrigin();
                    q = tm.getRotation();
                    wheelMeshes[i].position.set(p.x(), p.y(), p.z());
                    wheelMeshes[i].quaternion.set(q.x(), q.y(), q.z(), q.w());
                    

                    if(tyres.length == 0)
                        continue;


                    if(i < 2) {
                        if(vehicleSteering > 0)
                            tyres[i].rotation.z = Math.PI / 6;
                        else if(vehicleSteering < 0)
                            tyres[i].rotation.z = -Math.PI / 6;
                        else
                        tyres[i].rotation.z = 0;
                    }

                    if(Math.abs(speed) < 1.2)
                        continue;

                    var sclRotation = 0.02 * ( (speed / 15) + 1 );
                    if(engineForce > 0) {
                        tyres[i].rotation.x += sclRotation;
                        lastCoeff = 1;
                    } else if(engineForce < 0) {
                        tyres[i].rotation.x -= sclRotation;
                        lastCoeff = -1;
                    } else {
                        tyres[i].rotation.x += lastCoeff * sclRotation;
                    }

                }

                tm = vehicle.getChassisWorldTransform();
                p = tm.getOrigin();
                q = tm.getRotation();
                chassisMesh.position.set(p.x(), p.y(), p.z());
                chassisMesh.quaternion.set(q.x(), q.y(), q.z(), q.w());
            }

            syncList.push(sync);
        }

        var animate = function () {

            requestAnimationFrame(animate);
            var dt = clock.getDelta();

            for (var i = 0; i < syncList.length; i++)
                syncList[i](dt);

            physicsWorld.stepSimulation( dt, 10 );
            let vPos = vehicle.getChassisWorldTransform().getOrigin();
            let vRot = vehicle.getChassisWorldTransform().getRotation();
            // chassisMesh.quaternion.set(q.x(), q.y(), q.z(), q.w());
            if(car !== null) {
                car.position.set(vPos.x(), vPos.y()-5, vPos.z());
                car.quaternion.set(vRot.x(), vRot.y(), vRot.z(), vRot.w());
            }

            renderer.render( scene, camera );
        };

        initPhysicsGraphics();
        initPhysics();
        createBox(new THREE.Vector3(0, -0.5, 0), ZERO_QUATERNION, 550, 5, 550, 0, 2);
    
        var quaternion = new THREE.Quaternion(0, 0, 0, 1);
        quaternion.setFromAxisAngle(new THREE.Vector3(0, 1, 0), Math.PI / 2);
        
        createVehicle(new THREE.Vector3(0, 5, 0), quaternion);

        createBox(new THREE.Vector3(100, 7, 70), ZERO_QUATERNION, 10, 10, 30, 0, 0);
        createBox(new THREE.Vector3(-140, 5, -80), ZERO_QUATERNION, 10, 10, 60, 0, 0);
        createBox(new THREE.Vector3(-50, 3, 200), ZERO_QUATERNION, 80, 5, 5, 0, 0);
        createBox(new THREE.Vector3(90, 7, -90), ZERO_QUATERNION, 20, 20, 20, 0, 0);

        createBox(new THREE.Vector3(260, 5, 5), ZERO_QUATERNION, 10, 15, 500, 0, 0);
        createBox(new THREE.Vector3(-260, 5, 5), ZERO_QUATERNION, 10, 15, 500, 0, 0);
        createBox(new THREE.Vector3(5, 5, -260), ZERO_QUATERNION, 500, 15, 10, 0, 0);
        createBox(new THREE.Vector3(5, 5, 260), ZERO_QUATERNION, 500, 15, 10, 0, 0);

        animate();

    });



</script>
    