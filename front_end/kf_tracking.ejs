<%- include('./partial_imports/import_above_content.ejs', { Title: "Tracking with Kalman Filter", PageAddr: 'kf_tracking' } ) %>

<div class="row mt">
    <div class="col-lg-12">
        <div class="form-panel">
        <h4 class="mb"><i class="fa fa-angle-right"></i> Connection Configuration </h4>

        <div class="row mt" id="ip_div_id">
            <div class="form-group form-horizontal">
                <label class="col-sm-2 control-label"  style="padding-left: 20px; width: 16%;">IP</label>
                <div class="col-sm-4" style="padding-left: 0px;">
                    <input class="form-control" id="ip_id" placeholder="127.0.0.1" value="">
                </div>
            </div>
        </div>

        <div class="row mt" id="port_div_id">
            <div class="form-group form-horizontal">
                <label class="col-sm-2 control-label"  style="padding-left: 20px; width: 16%;">Port</label>
                <div class="col-sm-4" style="padding-left: 0px;">
                    <input class="form-control" id="port_id" placeholder="5091" value="">
                </div>
            </div>
        </div>

        </div>
        <!-- /form-panel -->
    </div>
    <!-- /col-lg-12 -->
</div>

<!-- INLINE FORM ELELEMNTS -->
<div class="row mt">
    <div class="col-lg-12">
        <div class="form-panel">
        <h4 class="mb"><i class="fa fa-angle-right"></i> Kalman Parameters</h4>

        <div class="row mt">
            <div class="col-lg-8">
                <div class="form-inline" role="form" class="col-sm-6">
                    <div class="form-group">
                        <input class="form-control" id="init_x" placeholder="Initial x Value">
                    </div>
                    <div class="form-group">
                        <input class="form-control" id="init_y" placeholder="Initial y Value">
                    </div>
                    <button class="btn btn-theme" id="btnInitial">Add Initial x & y with Mouse Click</button>
                </div>
            </div>
        </div>
        <div class="row mt">
            <div class="col-lg-8">
                <form class="form-inline" role="form" class="col-sm-6">
                    <div class="form-group">
                        <input class="form-control" id="std_x" placeholder="Std in x-direction">
                    </div>
                    <div class="form-group">
                        <input class="form-control" id="std_y" placeholder="Std in y-direction">
                    </div>
                </form>
            </div>
        </div>
        <div class="row mt">
            <div class="col-lg-8">
                <form class="form-inline" role="form">
                    <div class="form-group">
                        <input class="form-control" id="dt" placeholder="dt">
                    </div>
                    <div class="form-group">
                        <input class="form-control" id="process_noise" placeholder="Process Noise Magnitude">
                    </div>
                </form>
            </div>
        </div>

        <!-- <div class="row mt">
            <div class="form-group form-horizontal">
                <label class="col-sm-2 control-label"  style="padding-left: 20px; width: 16%;">Connection Type</label>
                <div class="col-sm-4" style="padding-left: 0px;">
                    <select class="form-control" id="connection_type" style="padding-left: 0px;">
                        <option value="uart">UART</option>
                        <option value="tcp">TCP/IP</option>
                    </select>
                </div>
            </div>
        </div>

        <div class="row mt">
            <div class="form-group form-horizontal">
                <label class="col-sm-2 control-label"  style="padding-left: 20px; width: 16%;">UART</label>
                <div class="col-sm-4" style="padding-left: 0px;">
                    <select class="form-control" id="uart_select" style="padding-left: 0px;">
                    </select>
                </div>
                <button type="button" class="btn btn-primary" id="reloadUart">Reload</button>
            </div>
        </div> -->

        </div>
        <!-- /form-panel -->
    </div>
    <!-- /col-lg-12 -->
</div>

<div style="margin: 5px;">
    <button type="button" class="btn btn-theme"   id="btnConnect">Connect</button>
    <button type="button" class="btn btn-theme"   id="btnResetAll">Reset</button>
    <button type="button" class="btn btn-success" id="btnMeasure">Add Measurement to Path</button>
    <button type="button" class="btn btn-primary" id="btnRun" >Run</button>
</div>
<div style="margin: 5px;">
    <div class="alert alert-success"><b id="workflow">Disconnect</b></div>
</div>

<main>
</main>


<%- include('./partial_imports/import_below_content.ejs') %>

<script type="text/javascript">

setDefaultValues("ip_id", "port_id")
function setWorkflow(txt) {
    $("#workflow").text(txt)
}

const windowWidth = 900;
const windowHeight = 600;

const { Matrix, EigenvalueDecomposition } = require('ml-matrix')

const { DrawHelper, HandleWorkFlow, DrawState, DrawTrigger, draw_rules } = require('../classes/cls_kf_tracking');

var drawHelper = new DrawHelper();
var handleWorkFlow = new HandleWorkFlow(ipcRenderer, drawHelper, windowWidth, showFlashMessage, setWorkflow);


var init_x = 0;
var init_y = 0;
var std_x  = 0.1;
var std_y  = 0.1;
var process_noise  = 1;
var dt  = 0.1;

$(document).ready( () => {


    $("#btnResetAll").click(function() {

        if(handleWorkFlow.canReset() == true) {
            eraseAll();
            handleWorkFlow.setReady();
            frameRate(30);
        }
    });

    $("#btnConnect").click(function() {
        handleWorkFlow.handleConnect( $('#ip_id').val(), $('#port_id').val() );
    });

    $("#btnMeasure").click(function() {

        if(drawHelper.canMeasure() == true) {

            if(points.length > 0)
                addMeasurementToPath();
            else
                showFlashMessage('First You have to Draw Path', 'WARNING');
        }   
    })

    $("#btnInitial").click(function() {

        if(drawHelper.canInit() == true) {
            drawHelper.draw_state = draw_rules[drawHelper.draw_state][DrawTrigger.AddPoint];
        }
    })

    $("#btnRun").click(function() {

        if(points.length == 0) {
            showFlashMessage('First You have to Draw Path', 'WARNING');
        } else if(pathMeasurements.length == 0) {
            showFlashMessage('You have to Add Measurements', 'WARNING');
        } else {

            init_x = $("#init_x").val() != "" ? $("#init_x").val() : 0;
            init_y = $("#init_y").val() != "" ? $("#init_y").val() : 0;
            std_x  = $("#std_x").val()  != "" ? $("#std_x").val()  : 0.1;
            std_y  = $("#std_y").val()  != "" ? $("#std_y").val()  : 0.1;
            process_noise  = $("#process_noise").val() != "" ? $("#process_noise").val() : 1;
            dt  = $("#dt").val() != "" ? $("#dt").val() : 0.1;

            params = [init_x, init_y, std_x, std_y, dt, process_noise]

            handleWorkFlow.handleRun(params, pathMeasurements);
        }
    })

});

let scl = 20;
var stepPointer = 0;

function moveX(x) {
    return windowWidth/2 + (x * scl)
}

function moveY(y) {
    return windowHeight  - (y * scl) - 10
}

// var shouldDraw = false
var points = []
var clutters = []
var pathMeasurements = []

let measurementColor        = [ 0, 0, 0, 170 ]
let groundtruthColor        = [ 0, 0, 255, 255 ]
let estimatedMeanColor      = [ 255, 140, 0, 255 ]
let estimatedCovarColor     = [ 255, 0, 0, 90 ]
let measurementCircleRadius = 5

function drawLegends() {

    fill(0, 102, 153);
    noStroke()
    textSize(12);
    textAlign(LEFT, CENTER);
    text('Measurements', 40, 30)
    text('Ground Truth', 40, 50)
    text('Estimated Mean', 40, 70)
    // text('Estimated Covariance', 40, 90)


    text(`Initial State: ${init_x}, ${init_y}`, windowWidth-120, 30);
    text(`Initial Std: ${std_x}, ${std_y}`, windowWidth-120, 50);
    text(`Process Noise: ${process_noise}`, windowWidth-120, 90);
    text(`dt: ${dt}`, windowWidth-120, 70);
    

    noStroke()
    fill(measurementColor[0], measurementColor[1], measurementColor[2], measurementColor[3])
    circle(20, 30, measurementCircleRadius*2)

    fill(groundtruthColor[0], groundtruthColor[1], groundtruthColor[2], groundtruthColor[3])
    circle(20, 50, measurementCircleRadius)
    stroke(groundtruthColor[0], groundtruthColor[1], groundtruthColor[2], groundtruthColor[3])
    strokeWeight(1.5)
    line(10, 50, 30, 50)

    noStroke()
    fill(estimatedMeanColor[0], estimatedMeanColor[1], estimatedMeanColor[2], estimatedMeanColor[3])
    circle(20, 70, measurementCircleRadius*2)

}

function drawBackground() {

    background(230, 230, 230);
    fill(210, 210, 210);
    strokeWeight(2);
    stroke(170);
    rect(0, 0, windowWidth, windowHeight);
}


function setup() {
    
    createCanvas(windowWidth, windowHeight)
    
    drawBackground()

    drawLegends()

    stroke(0)
    strokeWeight(2)
    frameRate(30);
}


function draw() {    
    

    drawBackground()
    drawLegends()

    if(drawHelper.isDrawingActive() == true) {
        var canAddPoint = true
        points.forEach(function(p, index, array) {
            if(dist(mouseX, mouseY, p[0], p[1]) < 10 )
                canAddPoint = false
        })

        if(canAddPoint == true)
            points.push([mouseX, mouseY])
    }

    points.forEach(function(item, index, array) {

        fill(groundtruthColor[0], groundtruthColor[1], groundtruthColor[2], groundtruthColor[3])
        stroke(groundtruthColor[0], groundtruthColor[1], groundtruthColor[2], groundtruthColor[3])
        circle(item[0], item[1], 3)
        
        if(index > 0) {
            fill(groundtruthColor[0], groundtruthColor[1], groundtruthColor[2], groundtruthColor[3])
            stroke(groundtruthColor[0], groundtruthColor[1], groundtruthColor[2], groundtruthColor[3])
            line(item[0], item[1], array[index - 1][0], array[index - 1][1])
        }
    })
    pathMeasurements.forEach(function(item, index, array) {

        fill(measurementColor[0], measurementColor[1], measurementColor[2], measurementColor[3])
        stroke(measurementColor[0], measurementColor[1], measurementColor[2], measurementColor[3])

        circle(item[0], item[1], 3)
    })

    handleWorkFlow.kfResults.forEach(function(currObj, index, array) {

        stroke(estimatedMeanColor[0], estimatedMeanColor[1], estimatedMeanColor[2], estimatedMeanColor[3])
        fill(estimatedMeanColor[0], estimatedMeanColor[1], estimatedMeanColor[2], estimatedMeanColor[3])
        var x = currObj[0]
        var y = currObj[1]
        circle(x, y, 5)

        if(index > 0) {
            line(x, y, handleWorkFlow.kfResults[index - 1][0], handleWorkFlow.kfResults[index - 1][1])
        }
    })
}

function eraseAll() {

    points = [];
    pathMeasurements = [];
    handleWorkFlow.kfResults = [];
}

function addMeasurementToPath() {

    pathMeasurements = []
    points.forEach(function(p, index, array) {
        pathMeasurements.push( [ parseInt( p[0] + random(-30, 30) ), parseInt( p[1] + random(-30, 30) ) ] )
    })
}

function isInCanvas() {

    return  mouseX >= 0 && mouseX <= width &&
            mouseY >= 0 && mouseY <= height;
}


function mousePressed() {

    if(isInCanvas() == true) {

        if(drawHelper.canDraw() == true) {
            eraseAll();
            drawHelper.draw_state = draw_rules[drawHelper.draw_state][DrawTrigger.Draw];

        } else if(drawHelper.isInitActive() == true) {

            $("#init_x").val(parseInt(mouseX));
            $("#init_y").val(parseInt(mouseY));
            drawHelper.draw_state = draw_rules[drawHelper.draw_state][DrawTrigger.PointAdded];
        }
    }
}

function mouseReleased() {

    if(drawHelper.draw_state == DrawState.Drawing) {
        drawHelper.draw_state = draw_rules[drawHelper.draw_state][DrawTrigger.StopDraw]
    }
}

</script>