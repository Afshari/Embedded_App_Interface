<%- include('./import_above_content.ejs', { Title: "Detectron & Tracking with JPDA", PageAddr: 'detectron_tracking' } ) %>


<!-- <h3 id='statusH3'>Status: Running</h3> -->
<!-- <input type="button" value="Click Me"></input> -->
<div style="margin: 5px;">
    <button type="button" class="btn btn-success" id="btnPrevFrame">Previous Frame</button>
    <button type="button" id="btnPause" class="btn btn-primary">Pause</button>
    <button type="button" class="btn btn-success" id="btnNextFrame">Next Frame</button>
</div>

<main>
</main>



<%- include('./import_below_content.ejs') %>

<script type="text/javascript">

const electron = require('electron');
const { ipcRenderer } = electron;
let fs = require('fs')
var Enum = require('enum')

var State = new Enum( { 'running': 1, 'pause': 2, 'oneFrame': 3, 'reloadFrame': 4 } )
var state = State.running

const windowWidth = 800;
const windowHeight = 450;


function setStatus(state) {
    if(state == State.pause) {
        $("#btnPause").text("Run")

    } else if(state == State.running) {
        $("#btnPause").text("Pause")
    }
}

function getRelativeViewX(currX) {
    return ( (currX - trackingOrigin[1] ) * xScl) + (1.25 * windowWidth)
}

function getAbsoluteViewX(currX) {
    return (cX * xScl) + (1.25 * windowWidth)
}

function getRelativeViewY(currY) {
    return windowHeight - ( (currY - trackingOrigin[0]) * yScl)
}

function getAbsoluteViewY(currY) {
    return windowHeight - (cY * yScl)
}


function handlePauseRun() {

    if(state == State.running) {
        state = State.pause
        setStatus(state)

    } else if(state == State.pause) {
        state = State.running
        setStatus(state)
    }
}

function handleNextFrame() {
    if(imageCounter < listOfData.length - 1 && state == State.pause ) {
        imageCounter += 1
        state = State.oneFrame
    }
}

function handlePreviousFrame() {
    if(imageCounter > 0 && state == State.pause) {
        imageCounter -= 1
        state = State.oneFrame
    }
}

$(document).ready(function() {

    $("#btnPause").click(function(e) {
        handlePauseRun()
        e.preventDefault()
        return false
    })

    $("#btnPrevFrame").click(function(e) {

        handlePreviousFrame()
        e.preventDefault()
        return false
    })

    $("#btnNextFrame").click(function(e) {

        handleNextFrame()
        e.preventDefault()
        return false
    })

})


var cX = 0
var cY = 0
const xScl = 7
const yScl = 3

ipcRenderer.on('tracking:data:get', function (evt, message) {
    var msg = String(message).split(',')

    cX = parseFloat(msg[0])
    cY = parseFloat(msg[2])

});

let img;

var listOfData = []
var allData = []
var indices = []
var imageCounter = 0
var shouldDrawRect = false
var shouldSendData = false
var rectX1, rectX2, rectY1, rectY2


let measurementColor = [0, 255, 0, 255]
let cameraColor = [0, 255, 255, 255]
let objColor = [0, 0, 255, 128]

function drawLegends() {

    fill(0, 102, 153);
    noStroke()
    textSize(12);
    textAlign(LEFT, CENTER);
    text('Measurements', windowWidth+40, 30)
    text('Camera', windowWidth+40, 50)
    text('Tracking Object', windowWidth+40, 70)


    noStroke()
    fill(measurementColor[0], measurementColor[1], measurementColor[2], measurementColor[3])
    circle(windowWidth+20, 30, 5)

    fill(cameraColor[0], cameraColor[1], cameraColor[2], cameraColor[3])
    circle(windowWidth+20, 50, 5)

    fill(objColor[0], objColor[1], objColor[2], objColor[3])
    circle(windowWidth+20, 70, 5)

}

function setup() {
    
    createCanvas(3*windowWidth/2, windowHeight)
    drawLegends()
        
    let filepath = "/Users/mohsen/Documents/state_estimate_ws/vision/Detectron/boxes_points/cars_9.txt"

    const data = fs.readFileSync(filepath, 'utf-8')
    allData = data.split('\r\n')

    for(var i = 0; i < allData.length; i++) {
        if(allData[i].includes('.jpg')) {
            indices.push(i)
            listOfData.push(allData[i])
            
        }
    }

    frameRate(5)
}

var trackingOrigin = [-1, -1]
var currPose = [-1, -1]

function draw() {    


    if(imageCounter >= listOfData.length - 1) {
        ipcRenderer.send('tracking:connection:close', 'EOF')
        noLoop()
    }

    if( ( state == State.running || state == State.oneFrame ) && imageCounter < listOfData.length - 1) {

        if(state == State.running)
            imageCounter += 1

        shouldDrawRect = false

        if(shouldSendData) {

            var dataForSend = ''
            for(var i = indices[imageCounter] + 1; i < allData.length; i++) {

                if(allData[i].includes('-----')) {

                    ipcRenderer.send('tracking:send', 'measurements: ' + dataForSend)
                    break
                } else if(allData[i].includes('pose')) {

                    var pose = allData[i].replace('pose: ', '').split(',')

                    if(trackingOrigin[0] == -1)
                        trackingOrigin = [ parseFloat(pose[0]), parseFloat(pose[1]) ]

                    currPose = [ parseFloat(pose[0]), parseFloat(pose[1]) ]

                    // var x = ( (currPose[1] - trackingOrigin[1] ) * xScl) + (1.5 * windowWidth)
                    // var y = windowHeight - ( (currPose[0] - trackingOrigin[0]) * yScl)
                    var x = getRelativeViewX(currPose[1])
                    var y = getRelativeViewY(currPose[0])

                    fill(cameraColor[0], cameraColor[1], cameraColor[2], cameraColor[3])
                    stroke(cameraColor[0], cameraColor[1], cameraColor[2], cameraColor[3])
                    circle(x, y, 2)

                    ipcRenderer.send('tracking:send', allData[i])

                } else if(allData[i].includes('trans')) {

                } else {
                    if(dataForSend != '')
                        dataForSend += '\n'

                    dataForSend += allData[i]

                    currMeasure = allData[i].split('|')
                    if(currMeasure[1].length > 1) {

                        currMeasure = currMeasure[1].replace('(', '').replace(')', '').split(',')
                        var x = currMeasure[3].replace("'", '')
                        var y = currMeasure[5].replace("'", '')

                        // x = ( (parseFloat(x) + currPose[1] - trackingOrigin[1] ) * xScl) + (1.5 * windowWidth)
                        // y = windowHeight - ( (currPose[0] - trackingOrigin[0] + parseFloat(y)) * yScl)

                        x = getRelativeViewX(parseFloat(x) + currPose[1])
                        y = getRelativeViewY(currPose[0] + parseFloat(y))

                        fill(measurementColor[0], measurementColor[1], measurementColor[2], measurementColor[3])
                        stroke(measurementColor[0], measurementColor[1], measurementColor[2], measurementColor[3])
                        circle(x, y, 2)
                    }
                } 
            }
        }
    }  
    
    if( state != State.pause && imageCounter < listOfData.length - 1 ) {

        loadImage('../' + listOfData[imageCounter], img => {
            img.resize(windowWidth, windowHeight)
            image(img, 0, 0);
            if(state == State.oneFrame || state == State.reloadFrame)
                state = State.pause


            if(cX != 0 && cY != 0) {

                // cX = (cX * xScl) + (1.5 * windowWidth)
                // cY = windowHeight - (cY * yScl)
                cX = getAbsoluteViewX(cX)
                cY = getAbsoluteViewY(cY)

                minX = 100
                minY = 100
                boxVal = ''

                for(var i = indices[imageCounter] + 1; i < allData.length; i++) {

                    if(allData[i].includes('-----')) {
                        break
                    } else if(allData[i].includes('pose')) {

                    } else if(allData[i].includes('trans')) {

                    } else {

                        currMeasure = allData[i].split('|')
                        if(currMeasure[1].length > 1) {

                            currMeasure = currMeasure[1].replace('(', '').replace(')', '').split(',')
                            var x = currMeasure[3].replace("'", '')
                            var y = currMeasure[5].replace("'", '')

                            // x = ( (parseFloat(x) + currPose[1] - trackingOrigin[1] ) * xScl) + (1.5 * windowWidth)
                            // y = windowHeight - ( (currPose[0] - trackingOrigin[0] + parseFloat(y)) * yScl)

                            x = getRelativeViewX(parseFloat(x) + currPose[1])
                            y = getRelativeViewY(currPose[0] + parseFloat(y))

                            if( abs(cX - x) < minX && abs(cY - y) < minY ) {
                                minX = abs(cX - x)
                                minY = abs(cY - y)
                                boxVal = allData[i].split('|')[0]
                            }
                        }
                    } 
                }

                
                if( sqrt( sq(minX) + sq(minY) ) < 7 ) {   
                    boxVal = boxVal.replace('[', '').replace(']', '')
                    var part1 = boxVal.split(',')
                    var x1 = part1[2]/2
                    var y1 = part1[3]/2
                    var x2 = part1[4]/2
                    var y2 = part1[5]/2
                    stroke(255, 255, 255)
                    fill(255, 255, 255, 128)
                    rect(x1, y1, x2-x1, y2-y1)
                } else 
                    console.log('min ', minX, minY)

                fill(0, 0, 255, 128)
                stroke(0, 0, 255, 128)
                circle(cX, cY, 2)
            }


            if(shouldDrawRect) {
                stroke(255, 255, 255)
                fill(255, 255, 255, 128)
                rect(rectX1, rectY1, rectX2-rectX1, rectY2-rectY1)
                shouldDrawRect = false
            }
        });
    }


}

function mouseClicked() {

    if(state != State.pause)
        return false

    if( mouseX < 0 && mouseY < 0 && mouseX > windowWidth && mouseY > windowHeight )
        return false

    console.log(mouseX, mouseY, imageCounter)

    for(var i = indices[imageCounter] + 3; i < allData.length; i++) {

        if(allData[i].includes('-----'))
            break

        
        var currData = allData[i].replace('[', '').replace(']', '').replace('(', '').replace(')', '')

        currData = currData.split('|')

        if(currData[1].length > 1) {

            var part1 = currData[0].split(',')

            currX1 = part1[2]/2
            currY1 = part1[3]/2
            currX2 = part1[4]/2
            currY2 = part1[5]/2

            if( currX1 < mouseX && currY1 < mouseY &&
                currX2 > mouseX && currY2 > mouseY ) {

                    state = State.reloadFrame
                    shouldDrawRect = true
                    shouldSendData = true
                    
                    ipcRenderer.send('tracking:send', 'prior: ' + allData[i])

                    rectX1 = currX1
                    rectY1 = currY1
                    rectX2 = currX2
                    rectY2 = currY2
            }
        }

    }



    return false;
}

function keyPressed() {

    if (keyCode === LEFT_ARROW) {
        
        handlePreviousFrame()

    } else if (keyCode === RIGHT_ARROW) {

        handleNextFrame()

    } else if (keyCode ===  "P".charCodeAt(0) ) {

        handlePauseRun()
    }
}


</script>

