<%- include('./import_above_content.ejs', { Title: "Path Planning A*" , PageAddr: 'a_star' } ) %>

<div style="margin: 5px;">
    <button type="button" class="btn btn-success" id="btnRandomGrid">Create Random Grid</button>
    <button type="button" class="btn btn-theme" id="btnReset">Reset</button>    
    <button type="button" class="btn btn-theme" id="btnStart">Start</button>
    <button type="button" class="btn btn-warning" id="btnStop">Stop</button>
    <button type="button" class="btn btn-success" id="btnErase">Erase All</button>
</div>

<main>
</main>

<%- include('./import_below_content.ejs') %>

<script type="text/javascript">

var Enum = require('enum')

var State = new Enum( { 

    'ready': 1,
    'running': 2, 
    'stop': 3,

} )
var state = State.ready;


$(document).ready(function() {

    $("#btnStart").click(function(e) {

        // mustStop = false;
        if(state == State.ready) {
            noLoop();
            ipcRenderer.send('path_finding:server:connect')

            const timer1 = setTimeout(function () {
                
                ipcRenderer.send('path_finding:send:size', `${rows},${cols}`)

                var strData = ""
                for (var i = 0; i < cols; i++) {
                    for (var j = 0; j < rows; j++) {
                        if(strData != "")
                            strData += ","
                        strData += `${ grid[i][j].wall == true ? 0 : 1}`
                    }
                }
                ipcRenderer.send('path_finding:send:data', strData)
        
                clearTimeout(timer1)

            }, 500)


            const timer2 = setTimeout(function () {

                ipcRenderer.send('path_finding:send:run')
                state = State.running;
                clearTimeout(timer2)

            }, 1000)
        }


    })

    // $("#btnStart").click(function(e) {
        
    //     ipcRenderer.send('path_finding:send:size', `${rows},${cols}`)

    //     var strData = ""
    //     for (var i = 0; i < cols; i++) {
    //         for (var j = 0; j < rows; j++) {
    //             if(strData != "")
    //                 strData += ","
    //             strData += `${ grid[i][j].wall == true ? 0 : 1}`
    //             // strData += `${i}, ${j},${grid[i][j].wall.toString()}`
    //         }
    //     }
    //     ipcRenderer.send('path_finding:send:data', strData)
        
    //     e.preventDefault()
    //     return false
    // })

    // $("#btnPause").click(function() {
    //     ipcRenderer.send('path_finding:send:end')
    // })

    $("#btnStop").click(function() {
        // mustStop = true;
        if(state == State.running) {
            state = State.stop;
            ipcRenderer.send('path_finding:server:disconnect');
        }
    })

    $("#btnRandomGrid").click(function() {
        if(state == State.ready)
            refreshGrid(true);
    })

    $("#btnErase").click(function() {
        if(state == State.ready)
            refreshGrid(false);
    })

    $("#btnReset").click(function() {
        if(state == State.stop) {
            state = State.ready;
            loop();
        }
    })

})

ipcRenderer.on('path_finding:draw:path', function (event, message) {

    data = message.split(';');
    for(var k = 0; k < data.length; k++) {
        var i = parseInt( data[k].split(',')[0] );
        var j = parseInt( data[k].split(',')[1] );
        stroke(255, 0, 0, 255);
        grid[i][j].show(color(255, 0, 0, 255));
    }
    state = State.stop;
})

ipcRenderer.on('path_finding:draw:step', function (event, message) {

    openList = message.split('|')[0]
    closedList = message.split('|')[1]


    background(255);

    // Draw Grid
    for (var i = 0; i < cols; i++) {
        for (var j = 0; j < rows; j++) {
            grid[i][j].show();
        }
    }

    // Draw Open List
    data = openList.split(';');

    for(var k = 0; k < data.length; k++) {
        var current = data[k].split(',');
        if(current.length > 1) {
            var i = parseInt( current[0] );
            var j = parseInt( current[1] );
            stroke(0, 255, 0, 50);
            grid[i][j].show(color(0, 255, 0, 50));
        }
    }

    // Draw Closed List
    data = closedList.split(';');

    for(var k = 0; k < data.length; k++) {

        if(current.length > 1) {
            var current = data[k].split(',')
            var i = parseInt( current[0] );
            var j = parseInt( current[1] );
            stroke(255, 0, 0, 50);
            grid[i][j].show(color(255, 0, 0, 50));
        }
    }

    if(state == State.running)
        ipcRenderer.send('path_finding:send:run')

})


function Spot(i, j, genRandom) {
    
    this.i = i;
    this.j = j;

    this.wall = false;

    if(genRandom == true) {
        if (random(1) < 0.3) {
            this.wall = true;
        }
    }


    this.show = function (col) {
        if (this.wall) {
            fill(0);
            noStroke();
            rect(this.i * w, this.j * h, w, h);
        } else if (col) {
            fill(col);
            rect(this.i * w, this.j * h, w, h);
        }
    };

}

// Function to delete element from the array
// function removeFromArray(arr, elt) {
//     // Could use indexOf here instead to be more efficient
//     for (var i = arr.length - 1; i >= 0; i--) {
//         if (arr[i] == elt) {
//             arr.splice(i, 1);
//         }
//     }
// }

// An educated guess of how far it is between two points
// function heuristic(a, b) {
//     var d = dist(a.i, a.j, b.i, b.j);
//     return d;
// }

// How many columns and rows?
var cols = 50;
var rows = 50;

// This will be the 2D array
var grid = new Array(cols);
// var mustStop = false;

var w, h;


function refreshGrid(genRandom) {

    // Making a 2D array
    for (var i = 0; i < cols; i++) {
        grid[i] = new Array(rows);
    }

    for (var i = 0; i < cols; i++) {
        for (var j = 0; j < rows; j++) {
            grid[i][j] = new Spot(i, j, genRandom);
        }
    }

    grid[0][0].wall = false;
    grid[cols - 1][rows - 1].wall = false;

    background(255);

    for (var i = 0; i < cols; i++) {
        for (var j = 0; j < rows; j++) {
            grid[i][j].show();
        }
    }

}

function setup() {

    createCanvas(500, 500);
    // console.log('A*');

    // Grid cell size
    w = width / cols;
    h = height / rows;

    refreshGrid(true);

    // noLoop();
}

function draw() {

    // Draw current state of everything
    background(255);

    for (var i = 0; i < cols; i++) {
        for (var j = 0; j < rows; j++) {
            grid[i][j].show();
        }
    }
}


function mousePressed() {
    
    if(state == State.ready &&
        mouseX >= 0 && mouseX < width &&
        mouseY >= 0 && mouseY < height) {
        var i = parseInt( mouseX / w)
        var j = parseInt( mouseY / h)
        console.log(i, j);
        grid[i][j].wall = !grid[i][j].wall;
    }
}

function mouseDragged() {

    if(state == State.ready &&
        mouseX >= 0 && mouseX < width &&
        mouseY >= 0 && mouseY < height) {
        var i = parseInt( mouseX / w)
        var j = parseInt( mouseY / h)
        console.log(i, j);
        grid[i][j].wall = true;
    }
}

</script>